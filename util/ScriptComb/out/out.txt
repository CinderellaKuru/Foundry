public class VarNode { public int id; }
public class TriggerVar : VarNode { };
public class BoolVar : VarNode { };
public class FloatVar : VarNode { };
public class SquadVar : VarNode { };
public class IntegerVar : VarNode { };
public class PlayerVar : VarNode { };
public class PlayerListVar : VarNode { };
public class PowerVar : VarNode { };
public class TechVar : VarNode { };
public class ObjectTypeVar : VarNode { };
public class VectorVar : VarNode { };
public class UnitListVar : VarNode { };
public class UnitVar : VarNode { };
public class SquadListVar : VarNode { };
public class ObjectiveVar : VarNode { };
public class SoundVar : VarNode { };
public class ProtoSquadVar : VarNode { };
public class LocStringIDVar : VarNode { };
public class ChatSpeakerVar : VarNode { };
public class TimeVar : VarNode { };
public class TalkingHeadVar : VarNode { };
public class OperatorVar : VarNode { };
public class PlayerStateVar : VarNode { };
public class CostVar : VarNode { };
public class StringVar : VarNode { };
public class ObjectDataTypeVar : VarNode { };
public class ObjectDataRelativeVar : VarNode { };
public class CommandTypeVar : VarNode { };
public class EntityFilterSetVar : VarNode { };
public class ColorVar : VarNode { };
public class DataScalarVar : VarNode { };
public class ObjectVar : VarNode { };
public class ObjectListVar : VarNode { };
public class VectorListVar : VarNode { };
public class CinematicVar : VarNode { };
public class EventTypeVar : VarNode { };
public class FlareTypeVar : VarNode { };
public class ProtoObjectVar : VarNode { };
public class TeamVar : VarNode { };
public class ConceptListVar : VarNode { };
public class DifficultyVar : VarNode { };
public class ObjectTypeListVar : VarNode { };
public class HUDItemVar : VarNode { };
public class MathOperatorVar : VarNode { };
public class AnimTypeVar : VarNode { };
public class ProtoSquadListVar : VarNode { };
public class ConceptVar : VarNode { };
public class ListPositionVar : VarNode { };
public class MissionTypeVar : VarNode { };
public class IntegerListVar : VarNode { };
public class IteratorVar : VarNode { };
public class RefCountTypeVar : VarNode { };
public class DesignLineVar : VarNode { };
public class DiplomacyVar : VarNode { };
public class TechListVar : VarNode { };
public class ProtoObjectListVar : VarNode { };
public class IconTypeVar : VarNode { };
public class RumbleTypeVar : VarNode { };
public class FlashableUIItemVar : VarNode { };
public class BuildingCommandStateVar : VarNode { };
public class SquadModeVar : VarNode { };
public class MissionStateVar : VarNode { };
public class AISquadAnalysisVar : VarNode { };
public class MissionTargetTypeVar : VarNode { };
public class AISquadAnalysisComponentVar : VarNode { };
public class TeamListVar : VarNode { };
public class DesignLineListVar : VarNode { };
public class FloatListVar : VarNode { };
public class TechStatusVar : VarNode { };
public class MessageIndexVar : VarNode { };
public class MessageJustifyVar : VarNode { };
public class MessagePointVar : VarNode { };
public class ControlTypeVar : VarNode { };
public class UIButtonVar : VarNode { };
public class LOSTypeVar : VarNode { };
public class PlacementRuleVar : VarNode { };
public class UILocationVar : VarNode { };
public class PercentVar : VarNode { };
public class CivVar : VarNode { };
public class LeaderVar : VarNode { };
public class GameStatePredicateVar : VarNode { };
public class UnitFlagVar : VarNode { };
public class ExposedScriptVar : VarNode { };
public class UISquadListVar : VarNode { };
public class LocationVar : VarNode { };
public class SquadFlagVar : VarNode { };
public class BidStateVar : VarNode { };
public class GroupVar : VarNode { };
public class UserClassTypeVar : VarNode { };
public class KBBaseVar : VarNode { };
public class KBSquadQueryVar : VarNode { };
public class KBSquadListVar : VarNode { };
public class KBSquadFilterSetVar : VarNode { };
public class KBBaseQueryVar : VarNode { };
public class KBBaseListVar : VarNode { };
public class BidTypeVar : VarNode { };
public class EntityVar : VarNode { };
public class UILocationMinigameVar : VarNode { };
public class UISquadVar : VarNode { };
public class SquadDataTypeVar : VarNode { };
[Node(name:"TriggerActivate", menu:"Debug")]public void TriggerActivateEffect(TriggerVar inVarTrigger) {

}
[Node(name:"CopyBool", menu:"Debug")]public void CopyBoolEffect(BoolVar inVarBoolSource, BoolVar outVarBoolCopy) {

}
[Node(name:"CopyFloat", menu:"Debug")]public void CopyFloatEffect(FloatVar inVarFloatSource, FloatVar outVarFloatCopy) {

}
[Node(name:"CopySquad", menu:"Debug")]public void CopySquadEffect(SquadVar inVarSquadSource, SquadVar outVarSquadCopy) {

}
[Node(name:"CopyInt", menu:"Debug")]public void CopyIntEffect(IntegerVar inVarIntSource, IntegerVar outVarIntCopy) {

}
[Node(name:"PowerRevoke", menu:"Debug")]public void PowerRevokeEffect(PlayerVar inVarPlayer, PlayerListVar inVarPlayerList, PowerVar inVarPower, SquadVar inVarPowerSquad) {

}
[Node(name:"TechActivate", menu:"Debug")]public void TechActivateEffect(PlayerVar inVarPlayer, TechVar inVarTech) {

}
[Node(name:"ObjectiveComplete", menu:"Debug")]public void ObjectiveCompleteEffect(ObjectiveVar inVarObjective, BoolVar inVarEnabled) {

}
[Node(name:"PlaySound", menu:"Debug")]public void PlaySoundEffect(SoundVar inVarSound, BoolVar inVarQueue) {

}
[Node(name:"PlayChat", menu:"Debug")]public void PlayChatEffect(SoundVar inVarChatSound, BoolVar inVarQueueSound, LocStringIDVar inVarChatString, ChatSpeakerVar inVarChatSpeaker, TimeVar inVarDuration, TalkingHeadVar inVarTalkingHead) {

}
[Node(name:"MissionResult", menu:"Debug")]public void MissionResultEffect(PlayerStateVar inVarPlayerState) {

}
[Node(name:"GetGameTime", menu:"Debug")]public void GetGameTimeEffect(TimeVar inVarDeltaTime, TimeVar outVarResultTime) {

}
[Node(name:"SetTrickleRate", menu:"Debug")]public void SetTrickleRateEffect(PlayerVar inVarPlayer, PlayerListVar inVarPlayerList, CostVar inVarTrickleRate) {

}
[Node(name:"ModifyProtoData", menu:"Debug")]public void ModifyProtoDataEffect(PlayerVar inVarPlayer, PlayerListVar inVarPlayerList, ObjectTypeVar inVarObjectType, FloatVar inVarAmount, FloatVar inVarAmountAsPercent, StringVar inVarActionName, ObjectDataTypeVar inVarDataType, ObjectDataRelativeVar inVarAmountRelation, CommandTypeVar inVarCommandType, TechVar inVarCommandDataTech, IntegerVar inVarCommandData, BoolVar inVarInvertRelation, BoolVar inVarEffectAllActions) {

}
[Node(name:"FilterAddPlayers", menu:"Debug")]public void FilterAddPlayersEffect(PlayerListVar inVarPlayerList, BoolVar inVarinvertFilter, EntityFilterSetVar outVarEntityFilterSet) {

}
[Node(name:"CopyPlayer", menu:"Debug")]public void CopyPlayerEffect(PlayerVar inVarPlayerSource, PlayerVar outVarPlayerCopy) {

}
[Node(name:"PlayerListAdd", menu:"Debug")]public void PlayerListAddEffect(PlayerVar inVarAddPlayer, PlayerListVar inVarAddPlayerList, PlayerListVar outVarOutputList, BoolVar outVarClearExisting) {

}
[Node(name:"FadeTransition", menu:"Debug")]public void FadeTransitionEffect(TimeVar inVarFadeDown, TimeVar inVarHold, TimeVar inVarFadeUp, BoolVar inVarReverse, ColorVar inVarFadeColor) {

}
[Node(name:"ModifyDataScalar", menu:"Debug")]public void ModifyDataScalarEffect(UnitVar inVarUnit, UnitListVar inVarUnitList, SquadVar inVarSquad, SquadListVar inVarSquadList, DataScalarVar inVarDataScalar, FloatVar inVarPercent, BoolVar inVarAdjust) {

}
[Node(name:"SetMobile", menu:"Debug")]public void SetMobileEffect(UnitVar inVarUnit, UnitListVar inVarUnitList, SquadVar inVarSquad, SquadListVar inVarSquadList, BoolVar inVarTemporaryEffect, BoolVar inVarMobile) {

}
[Node(name:"Move", menu:"Debug")]public void MoveEffect(SquadVar inVarSquad, SquadListVar inVarSquadList, UnitVar inVarTargetUnit, SquadVar inVarTargetSquad, VectorVar inVarTargetLocation, BoolVar inVarAttackMove, BoolVar inVarQueueOrder) {

}
[Node(name:"Repair", menu:"Debug")]public void RepairEffect(SquadVar inVarSquad, SquadListVar inVarSquadList, UnitVar inVarUnit, UnitListVar inVarUnitList, FloatVar inVarHitpoints, FloatVar inVarHPPercent, FloatVar inVarShieldpoints, FloatVar inVarSPPercent, BoolVar inVarSpreadAmongUnits) {

}
[Node(name:"SetAutoAttackable", menu:"Debug")]public void SetAutoAttackableEffect(UnitVar inVarUnit, UnitListVar inVarUnitList, SquadVar inVarSquad, SquadListVar inVarSquadList, BoolVar inVarAutoAttackable) {

}
[Node(name:"ObjectiveIncrementCounter", menu:"Debug")]public void ObjectiveIncrementCounterEffect(ObjectiveVar inVarObjective, IntegerVar inVarAmount, IntegerVar outVarCurrentCount) {

}
[Node(name:"Destroy", menu:"Debug")]public void DestroyEffect(UnitVar inVarDestroyUnit, UnitListVar inVarDestroyUnitList, SquadVar inVarDestroySquad, SquadListVar inVarDestroySquadList, ObjectVar inVarObject, ObjectListVar inVarObjectList) {

}
[Node(name:"SetPlayableBounds", menu:"Debug")]public void SetPlayableBoundsEffect(VectorVar inVarCorner1, VectorVar inVarCorner2) {

}
[Node(name:"HintMessageDestroy", menu:"Debug")]public void HintMessageDestroyEffect(LocStringIDVar inVarLocStringID) {

}
[Node(name:"Revealer", menu:"Debug")]public void RevealerEffect(PlayerVar inVarOwner, VectorVar inVarLocation, VectorListVar inVarLocationList, FloatVar inVarLOS, TimeVar inVarLifespan, ObjectVar outVarCreatedRevealer, ObjectListVar outVarAddToObjectList, BoolVar outVarClearExisting) {

}
[Node(name:"FlashEntity", menu:"Debug")]public void FlashEntityEffect(UnitVar inVarUnit, UnitListVar inVarUnitList, SquadVar inVarSquad, SquadListVar inVarSquadList, ObjectVar inVarObject, ObjectListVar inVarObjectList, TimeVar inVarIntervalTime, TimeVar inVarDurationTime, ColorVar inVarHighlightColor, FloatVar inVarIntensity) {

}
[Node(name:"LaunchCinematic", menu:"Debug")]public void LaunchCinematicEffect(CinematicVar inVarCinematicID, SquadVar inVarSquadToPossess1, SquadVar inVarSquadToPossess2, SquadVar inVarSquadToPossess3, SquadVar inVarSquadToPossess4, SquadVar inVarSquadToPossess5, SquadVar inVarSquadToPossess6, BoolVar outVarPreRendered) {

}
[Node(name:"EventSubscribe", menu:"Debug")]public void EventSubscribeEffect(EventTypeVar inVarEventType, PlayerVar inVarPlayer, IntegerVar outVarEventID) {

}
[Node(name:"HintCalloutDestroy", menu:"Debug")]public void HintCalloutDestroyEffect(IntegerVar inVarID) {

}
[Node(name:"ShowObjectivePointer", menu:"Debug")]public void ShowObjectivePointerEffect(PlayerVar inVarPlayer, PlayerListVar inVarPlayerList, IntegerVar inVarWidgetID, BoolVar inVarVisible, UnitVar inVarPointToUnit, SquadVar inVarPointToSquad, VectorVar inVarPointToLocation, BoolVar inVarUseTarget, BoolVar inVarForceTargetVisible) {

}
[Node(name:"FlareMinimapNormal", menu:"Debug")]public void FlareMinimapNormalEffect(PlayerVar inVarFlaringPlayer, VectorVar inVarFlareLocation, FlareTypeVar inVarFlareType) {

}
[Node(name:"SquadListAdd", menu:"Debug")]public void SquadListAddEffect(SquadVar inVarAddSquad, SquadListVar inVarAddList, SquadListVar inVarAddMoreList, SquadListVar outVarDestList, BoolVar outVarClearExisting) {

}
[Node(name:"CreateUnit", menu:"Debug")]public void CreateUnitEffect(ProtoObjectVar inVarProtoObject, PlayerVar inVarUnitOwner, VectorVar inVarCreateLocation, VectorVar inVarFacing, BoolVar inVarStartBuilt, UnitVar outVarCreatedUnit, UnitListVar outVarAddToUnitList, SquadVar outVarCreatedSquad, SquadListVar outVarAddToSquadList, BoolVar outVarClearExisting) {

}
[Node(name:"UnitListAdd", menu:"Debug")]public void UnitListAddEffect(UnitVar inVarAddUnit, UnitListVar inVarAddList, UnitListVar inVarAddMoreList, UnitListVar outVarDestList, BoolVar outVarClearExisting) {

}
[Node(name:"ObjectiveGetFinalCounter", menu:"Debug")]public void ObjectiveGetFinalCounterEffect(ObjectiveVar inVarObjective, IntegerVar outVarFinalCount) {

}
[Node(name:"ObjectiveDisplay", menu:"Debug")]public void ObjectiveDisplayEffect(ObjectiveVar inVarObjective, BoolVar inVarEnabled, TimeVar inVarDuration) {

}
[Node(name:"RandomLocation", menu:"Debug")]public void RandomLocationEffect(VectorVar inVarOrigLocation, FloatVar inVarInnerRadius, FloatVar inVarOuterRadius, BoolVar inVarTestObstructions, BoolVar inVarTestPathing, ProtoObjectVar inVarTestProtoObject, ProtoSquadVar inVarTestProtoSquad, VectorVar outVarRandLocation) {

}
[Node(name:"CreateSquad", menu:"Debug")]public void CreateSquadEffect(ProtoSquadVar inVarProtoSquad, VectorVar inVarCreateLocation, VectorVar inVarFacing, PlayerVar inVarSquadOwner, VectorVar inVarFlyInStart, VectorVar inVarFlyInEnd, VectorVar inVarRallyPoint, BoolVar inVarAttackMoveRallyPoint, SquadVar outVarCreatedSquad, SquadListVar outVarAddToSquadList, BoolVar outVarSquadListClearExisting) {

}
[Node(name:"PowerGrant", menu:"Debug")]public void PowerGrantEffect(PlayerVar inVarPlayer, PlayerListVar inVarPlayerList, PowerVar inVarPower, SquadVar inVarPowerSquad, IntegerVar inVarIconLocation, IntegerVar inVarNumUses, BoolVar inVarIgnoreCost, BoolVar inVarIgnoreTech, BoolVar inVarIgnorePop) {

}
[Node(name:"HintCalloutCreate", menu:"Debug")]public void HintCalloutCreateEffect(PlayerListVar inVarPlayerList, LocStringIDVar inVarLocStringID, VectorVar inVarLocation, SquadVar inVarSquad, UnitVar inVarUnit, IntegerVar outVarID) {

}
[Node(name:"HintMessageShow", menu:"Debug")]public void HintMessageShowEffect(PlayerListVar inVarPlayerList, LocStringIDVar inVarLocStringID, TimeVar inVarTime) {

}
[Node(name:"GetSquads", menu:"Debug")]public void GetSquadsEffect(PlayerVar inVarFilterPlayer, ProtoSquadVar inVarFilterProtoSquad, VectorVar inVarFilterLocation, FloatVar inVarFilterDistance, SquadListVar inVarFilterSquadList, ObjectTypeVar inVarFilterObjectType, SquadListVar outVarFoundSquads, IntegerVar outVarFoundSquadCount) {

}
[Node(name:"ConceptPermission", menu:"Debug")]public void ConceptPermissionEffect(PlayerVar inVarPlayer, BoolVar inVarEnableAll, ConceptListVar inVarEnableList) {

}
[Node(name:"SetScenarioScoreInfo", menu:"Debug")]public void SetScenarioScoreInfoEffect(FloatVar inVarCombatBonusMinMultiplier, FloatVar inVarCombatBonusMaxMultiplier, TimeVar inVarMinParTime, TimeVar inVarMaxParTime, IntegerVar inVarScoreNeededForGradeA, IntegerVar inVarScoreNeededForGradeB, IntegerVar inVarScoreNeededForGradeC, IntegerVar inVarScoreNeededForGradeD) {

}
[Node(name:"LaunchScript", menu:"Debug")]public void LaunchScriptEffect(StringVar inVarScriptName, UnitVar inVarExternalUnit, UnitListVar inVarExternalUnitList, SquadVar inVarExternalSquad, SquadListVar inVarExternalSquadList, PlayerVar inVarExternalPlayer, PowerVar inVarExternalPower, CostVar inVarExternalCost, VectorVar inVarExternalLocation, VectorListVar inVarExternalLocationList, FloatVar inVarExternalFloat) {

}
[Node(name:"CombatDamage", menu:"Debug")]public void CombatDamageEffect(SquadVar inVarSquad, SquadListVar inVarSquadList, UnitVar inVarUnit, UnitListVar inVarUnitList, FloatVar inVarDamage, BoolVar inVarSpreadAmongUnits, BoolVar inVarOverrideRevive) {

}
[Node(name:"TriggerDeactivate", menu:"Debug")]public void TriggerDeactivateEffect(TriggerVar inVarTrigger) {

}
[Node(name:"ResetAbilityTimer", menu:"Debug")]public void ResetAbilityTimerEffect(PlayerListVar inVarPlayerList, ObjectTypeListVar inVarObjectTypeList) {

}
[Node(name:"CopyTime", menu:"Debug")]public void CopyTimeEffect(TimeVar inVarTimeSource, TimeVar outVarTimeCopy) {

}
[Node(name:"CopyColor", menu:"Debug")]public void CopyColorEffect(ColorVar inVarColorSource, ColorVar outVarColorCopy) {

}
[Node(name:"SetPlayerState", menu:"Debug")]public void SetPlayerStateEffect(PlayerVar inVarPlayer, PlayerStateVar inVarPlayerState) {

}
[Node(name:"Kill", menu:"Debug")]public void KillEffect(UnitVar inVarKillUnit, UnitListVar inVarKillUnitList, SquadVar inVarKillSquad, SquadListVar inVarKillSquadList, ObjectVar inVarObject, ObjectListVar inVarObjectList) {

}
[Node(name:"HUDToggle", menu:"Debug")]public void HUDToggleEffect(HUDItemVar inVarHUDItem, BoolVar inVarOnOff) {

}
[Node(name:"ChangeOwner", menu:"Debug")]public void ChangeOwnerEffect(SquadVar inVarChangeSquad, SquadListVar inVarChangeSquadList, PlayerVar inVarNewOwner) {

}
[Node(name:"GrantAchievement", menu:"Debug")]public void GrantAchievementEffect(StringVar inVarName) {

}
[Node(name:"MathInt", menu:"Debug")]public void MathIntEffect(IntegerVar inVarFirstInt, MathOperatorVar inVarMathOperator, IntegerVar inVarSecondInt, IntegerVar outVarResultInt) {

}
[Node(name:"EventFilterCamera", menu:"Debug")]public void EventFilterCameraEffect(IntegerVar inVarEventID, FloatVar inVarViewAreaRadius, VectorVar inVarLocation, UnitVar inVarUnit, ObjectVar inVarObject, BoolVar inVarInvert) {

}
[Node(name:"PlayAnimationObject", menu:"Debug")]public void PlayAnimationObjectEffect(ObjectVar inVarObject, AnimTypeVar inVarAnimType, TimeVar inVarAnimDuration, TimeVar outVarAnimDuration) {

}
[Node(name:"PowerMenuEnable", menu:"Debug")]public void PowerMenuEnableEffect(BoolVar inVarBool, PlayerVar inVarPlayer, PlayerListVar inVarPlayerList) {

}
[Node(name:"CopyProtoSquadList", menu:"Debug")]public void CopyProtoSquadListEffect(ProtoSquadListVar inVarSourceList, ProtoSquadListVar outVarDestList) {

}
[Node(name:"CreateSquads", menu:"Debug")]public void CreateSquadsEffect(ProtoSquadListVar inVarFlyInSquads, PlayerVar inVarPlayer, VectorVar inVarCreatePosition, VectorVar inVarFacing, VectorVar inVarFlyInStart, VectorVar inVarFlyInEnd, VectorVar inVarRallyPoint, BoolVar inVarAttackMoveRallyPoint, SquadListVar outVarCreatedSquads, SquadListVar outVarAddToList, BoolVar outVarClearExisting) {

}
[Node(name:"MathTime", menu:"Debug")]public void MathTimeEffect(TimeVar inVarFirstTime, MathOperatorVar inVarMathOperator, TimeVar inVarSecondTime, TimeVar outVarResultTime) {

}
[Node(name:"AsFloat", menu:"Debug")]public void AsFloatEffect(IntegerVar inVarInt, FloatVar outVarFloat) {

}
[Node(name:"ConceptSetParameters", menu:"Debug")]public void ConceptSetParametersEffect(PlayerVar inVarPlayer, ConceptVar inVarConcept, IntegerVar inVarPage, VectorVar inVarVector, SquadListVar inVarSquadList, UnitListVar inVarUnitList, EntityFilterSetVar inVarEntityFilterSet, FloatVar inVarFloat, ObjectTypeVar inVarObjectType, LocStringIDVar inVarLocStringID) {

}
[Node(name:"AIMissionGetValidSquads", menu:"Debug")]public void AIMissionGetValidSquadsEffect(IntegerVar inVarAIMissionID, SquadListVar outVarValidSquads, IntegerVar outVarValidSquadCount) {

}
[Node(name:"AIMissionRemoveSquads", menu:"Debug")]public void AIMissionRemoveSquadsEffect(IntegerVar inVarAIMissionID, SquadVar inVarRemoveSquad, SquadListVar inVarRemoveSquadList) {

}
[Node(name:"AIMissionCancel", menu:"Debug")]public void AIMissionCancelEffect(IntegerVar inVarMissionID) {

}
[Node(name:"SquadListDiff", menu:"Debug")]public void SquadListDiffEffect(SquadListVar inVarListA, SquadListVar inVarListB, SquadListVar outVarOnlyInA, SquadListVar outVarOnlyInB, SquadListVar outVarInBoth) {

}
[Node(name:"AIMissionAddSquads", menu:"Debug")]public void AIMissionAddSquadsEffect(IntegerVar inVarAIMissionID, SquadVar inVarAddSquad, SquadListVar inVarAddSquadList) {

}
[Node(name:"CopySquadList", menu:"Debug")]public void CopySquadListEffect(SquadListVar inVarSquadListSource, SquadListVar outVarSquadListCopy) {

}
[Node(name:"GetOwner", menu:"Debug")]public void GetOwnerEffect(UnitVar inVarUnit, SquadVar inVarSquad, PlayerVar outVarOwner) {

}
[Node(name:"AIGetMissions", menu:"Debug")]public void AIGetMissionsEffect(PlayerVar inVarPlayerID, MissionTypeVar inVarMissionType, IntegerListVar outVarMissionIDs, IntegerVar outVarMissionCount) {

}
[Node(name:"CopyLocation", menu:"Debug")]public void CopyLocationEffect(VectorVar inVarLocationSource, VectorVar outVarLocationCopy) {

}
[Node(name:"AIMissionCreate", menu:"Debug")]public void AIMissionCreateEffect(PlayerVar inVarPlayerID, IntegerVar outVarMissionID, IntegerVar outVarTopicID) {

}
[Node(name:"AIMissionSetMoveAttack", menu:"Debug")]public void AIMissionSetMoveAttackEffect(PlayerVar inVarPlayer, IntegerVar inVarMission, BoolVar inVarMoveAttack) {

}
[Node(name:"AICreateAreaTarget", menu:"Debug")]public void AICreateAreaTargetEffect(PlayerVar inVarPlayerID, VectorVar inVarPosition, FloatVar inVarRadius, BoolVar inVarAllowScoring, BoolVar inVarDestroyOnNoRefs, IntegerVar outVarMissionTargetID) {

}
[Node(name:"AICreateTargetWrapper", menu:"Debug")]public void AICreateTargetWrapperEffect(IntegerVar inVarMissionID, IntegerVar inVarTargetID, IntegerVar outVarWrapperID) {

}
[Node(name:"AIWrapperModifyParms", menu:"Debug")]public void AIWrapperModifyParmsEffect(IntegerVar inVarWrapperID, IntegerVar inVarTargetID, FloatVar inVarMinRetreatRatio, FloatVar inVarMinRalliedPercent, TimeVar inVarMinSecureTime) {

}
[Node(name:"AIWrapperModifyRadius", menu:"Debug")]public void AIWrapperModifyRadiusEffect(IntegerVar inVarWrapperID, FloatVar inVarLeashDist, FloatVar inVarSecureDist, FloatVar inVarRallyDist, FloatVar inVarSearchWorkDist, FloatVar inVarHotZoneDist) {

}
[Node(name:"AIWrapperModifyFlags", menu:"Debug")]public void AIWrapperModifyFlagsEffect(IntegerVar inVarWrapperID, BoolVar inVarFlagAllowRetreat, BoolVar inVarFlagAllowSkip, BoolVar inVarFlagRequireSecure, BoolVar inVarFlagGatherCrates) {

}
[Node(name:"CopyIntegerList", menu:"Debug")]public void CopyIntegerListEffect(IntegerListVar inVarSrcList, IntegerListVar outVarDestList) {

}
[Node(name:"IntegerListRemove", menu:"Debug")]public void IntegerListRemoveEffect(IntegerVar inVarRemoveOne, IntegerListVar inVarRemoveList, BoolVar inVarRemoveAll, BoolVar inVarRemoveDupes, IntegerListVar outVarModifyList) {

}
[Node(name:"EventSubscribeUseCount", menu:"Debug")]public void EventSubscribeUseCountEffect(EventTypeVar inVarEventType, PlayerVar inVarPlayer, IntegerVar outVarEventID) {

}
[Node(name:"FilterAddObjectTypes", menu:"Debug")]public void FilterAddObjectTypesEffect(ObjectTypeListVar inVarObjectTypeList, BoolVar inVarinvertFilter, EntityFilterSetVar outVarEntityFilterSet) {

}
[Node(name:"EventFilterEntity", menu:"Debug")]public void EventFilterEntityEffect(IntegerVar inVarEventID, EntityFilterSetVar inVarSourceFilter, EntityFilterSetVar inVarTargetFilter) {

}
[Node(name:"EventReset", menu:"Debug")]public void EventResetEffect(IntegerVar inVarEventID) {

}
[Node(name:"IntIncrement", menu:"Debug")]public void IntIncrementEffect(IntegerVar inVarOriginalInt, IntegerVar outVarIncrementedInt) {

}
[Node(name:"CopyLocationList", menu:"Debug")]public void CopyLocationListEffect(VectorListVar inVarLocationListSource, VectorListVar outVarLocationListCopy) {

}
[Node(name:"CopyDirection", menu:"Debug")]public void CopyDirectionEffect(VectorVar inVarDirectionSource, VectorVar outVarDirectionCopy) {

}
[Node(name:"LocationListAdd", menu:"Debug")]public void LocationListAddEffect(VectorVar inVarAddLocation, VectorListVar inVarAddLocationList, VectorListVar outVarDestList, BoolVar outVarClearExisting) {

}
[Node(name:"PowerInvoke", menu:"Debug")]public void PowerInvokeEffect(PlayerVar inVarPlayer, PowerVar inVarPower, VectorListVar inVarTargetLocs, VectorVar inVarDirection, IntegerVar inVarPowerLevel, BoolVar inVarIgnoreAllReqs, BoolVar inVarForPlayer) {

}
[Node(name:"IteratorLocationList", menu:"Debug")]public void IteratorLocationListEffect(VectorListVar inVarLocationList, IteratorVar outVarInitializedIterator) {

}
[Node(name:"GetLocation", menu:"Debug")]public void GetLocationEffect(UnitVar inVarUnit, SquadVar inVarSquad, ObjectVar inVarObject, VectorVar outVarOutputLocation) {

}
[Node(name:"CreateObject", menu:"Debug")]public void CreateObjectEffect(ProtoObjectVar inVarProtoObject, PlayerVar inVarPlayer, VectorVar inVarLocation, VectorVar inVarFacing, BoolVar inVarNoPhysics, ObjectVar outVarObject, ObjectListVar outVarAddToObjectList, BoolVar outVarClearExisting) {

}
[Node(name:"RefCountUnitAdd", menu:"Debug")]public void RefCountUnitAddEffect(UnitVar inVarUnit, UnitListVar inVarUnitList, SquadVar inVarSquad, SquadListVar inVarSquadList, RefCountTypeVar inVarRefCountType, IntegerVar outVarMaxCount) {

}
[Node(name:"RefCountUnitRemove", menu:"Debug")]public void RefCountUnitRemoveEffect(UnitVar inVarUnit, UnitListVar inVarUnitList, SquadVar inVarSquad, SquadListVar inVarSquadList, RefCountTypeVar inVarRefCountType, IntegerVar outVarMaxCount) {

}
[Node(name:"UnitListRemove", menu:"Debug")]public void UnitListRemoveEffect(UnitListVar inVarSourceList, UnitVar inVarRemoveUnit, UnitListVar inVarRemoveUnitList, BoolVar inVarRemoveAll) {

}
[Node(name:"ObjectListRemove", menu:"Debug")]public void ObjectListRemoveEffect(ObjectListVar inVarSrcList, ObjectVar inVarRemoveObject, ObjectListVar inVarRemoveObjectList, BoolVar inVarRemoveAll) {

}
[Node(name:"IteratorUnitList", menu:"Debug")]public void IteratorUnitListEffect(UnitListVar inVarUnitList, IteratorVar outVarInitializedIterator) {

}
[Node(name:"RandomTime", menu:"Debug")]public void RandomTimeEffect(TimeVar inVarMin, TimeVar inVarMax, TimeVar outVarRandom) {

}
[Node(name:"SquadListFilter", menu:"Debug")]public void SquadListFilterEffect(SquadListVar inVarSourceSquadList, EntityFilterSetVar inVarEntityFilterSet, SquadListVar outVarPassedSquadList, SquadListVar outVarFailedSquadList) {

}
[Node(name:"Work", menu:"Debug")]public void WorkEffect(SquadVar inVarSquad, SquadListVar inVarSquadList, UnitVar inVarTargetUnit, SquadVar inVarTargetSquad, VectorVar inVarTargetLocation, BoolVar inVarAttackMove, BoolVar inVarQueueOrder, BoolVar inVarDoAbility) {

}
[Node(name:"GetProtoSquad", menu:"Debug")]public void GetProtoSquadEffect(SquadVar inVarSquad, ProtoSquadVar outVarProtoSquad) {

}
[Node(name:"IteratorSquadList", menu:"Debug")]public void IteratorSquadListEffect(SquadListVar inVarSquadList, IteratorVar outVarInitializedIterator) {

}
[Node(name:"CopyLocStringID", menu:"Debug")]public void CopyLocStringIDEffect(LocStringIDVar inVarLocStringIDSource, LocStringIDVar outVarLocStringIDCopy) {

}
[Node(name:"GetHealth", menu:"Debug")]public void GetHealthEffect(UnitVar inVarUnit, UnitListVar inVarUnitList, SquadVar inVarSquad, SquadListVar inVarSquadList, FloatVar outVarHitpoints, FloatVar outVarHitpointsPercent, FloatVar outVarShieldpoints, FloatVar outVarShieldpointsPercent) {

}
[Node(name:"CopyProtoSquad", menu:"Debug")]public void CopyProtoSquadEffect(ProtoSquadVar inVarProtoSquadSource, ProtoSquadVar outVarProtoSquadCopy) {

}
[Node(name:"CopyUnitList", menu:"Debug")]public void CopyUnitListEffect(UnitListVar inVarUnitListSource, UnitListVar outVarUnitListCopy) {

}
[Node(name:"DesignLineGetPoints", menu:"Debug")]public void DesignLineGetPointsEffect(DesignLineVar inVarDesignLine, VectorListVar outVarLocationList) {

}
[Node(name:"SetSelectable", menu:"Debug")]public void SetSelectableEffect(UnitVar inVarUnit, UnitListVar inVarUnitList, SquadVar inVarSquad, SquadListVar inVarSquadList, ObjectVar inVarObject, ObjectListVar inVarObjectList, BoolVar inVarSelectable) {

}
[Node(name:"FilterAddDiplomacy", menu:"Debug")]public void FilterAddDiplomacyEffect(DiplomacyVar inVarDiplomacy, PlayerVar inVarComparePlayer, TeamVar inVarCompareTeam, BoolVar inVarInvertFilter, EntityFilterSetVar outVarEntityFilterSet) {

}
[Node(name:"SetIgnoreUserInput", menu:"Debug")]public void SetIgnoreUserInputEffect(SquadVar inVarSquad, SquadListVar inVarSquadList, BoolVar inVarIgnore) {

}
[Node(name:"Forbid", menu:"Debug")]public void ForbidEffect(BoolVar inVarIsForbidden, PlayerListVar inVarAffectedPlayers, TechListVar inVarProtoTechs, ProtoObjectListVar inVarProtoObjects, ProtoSquadListVar inVarProtoSquads) {

}
[Node(name:"TimerCreate", menu:"Debug")]public void TimerCreateEffect(BoolVar inVarCountUp, TimeVar inVarStartTime, TimeVar inVarStopTime, LocStringIDVar inVarLabel, PlayerVar inVarPlayer, PlayerListVar inVarPlayerList, IntegerVar outVarTimerID) {

}
[Node(name:"TimerGet", menu:"Debug")]public void TimerGetEffect(IntegerVar inVarTimerID, TimeVar outVarCurrentTime, BoolVar outVarActive) {

}
[Node(name:"TimerSet", menu:"Debug")]public void TimerSetEffect(IntegerVar inVarTimerID, BoolVar inVarCountUp, TimeVar inVarStartTime, TimeVar inVarStopTime) {

}
[Node(name:"CreateIconObject", menu:"Debug")]public void CreateIconObjectEffect(IconTypeVar inVarIconType, PlayerVar inVarPlayer, VectorVar inVarLocation, ColorVar inVarIconColor, BoolVar inVarVisibleToAll, BoolVar inVarClearExisting, ObjectVar outVarIconObject, ObjectListVar outVarAddToObjectList) {

}
[Node(name:"FlareMinimapSpoof", menu:"Debug")]public void FlareMinimapSpoofEffect(PlayerVar inVarFlaringPlayer, VectorVar inVarFlareLocation, PlayerVar inVarRecipientPlayer, PlayerListVar inVarRecipientPlayerList, FlareTypeVar inVarFlareType) {

}
[Node(name:"CopySound", menu:"Debug")]public void CopySoundEffect(SoundVar inVarSoundSource, SoundVar outVarSoundCopy) {

}
[Node(name:"CopyObjective", menu:"Debug")]public void CopyObjectiveEffect(ObjectiveVar inVarObjectiveSource, ObjectiveVar outVarObjectiveCopy) {

}
[Node(name:"GetMeanLocation", menu:"Debug")]public void GetMeanLocationEffect(UnitListVar inVarUnitList, SquadListVar inVarSquadList, ObjectListVar inVarObjectList, VectorListVar inVarLocationList, VectorVar outVarMeanLocation) {

}
[Node(name:"MathFloat", menu:"Debug")]public void MathFloatEffect(FloatVar inVarFirstFloat, MathOperatorVar inVarMathOperator, FloatVar inVarSecondFloat, FloatVar outVarResultFloat) {

}
[Node(name:"AsInt", menu:"Debug")]public void AsIntEffect(FloatVar inVarFloat, FloatVar inVarHitpoints, FloatVar inVarDistance, IntegerVar outVarInt) {

}
[Node(name:"MovePath", menu:"Debug")]public void MovePathEffect(SquadVar inVarSquad, SquadListVar inVarSquadList, VectorListVar inVarWaypoints, BoolVar inVarAttackMove, BoolVar inVarQueueOrder, BoolVar inVarUseClosest, BoolVar inVarReverseMove) {

}
[Node(name:"SquadListRemove", menu:"Debug")]public void SquadListRemoveEffect(SquadListVar inVarSourceList, SquadVar inVarRemoveSquad, SquadListVar inVarRemoveSquadList, BoolVar inVarRemoveAll) {

}
[Node(name:"CameraShake", menu:"Debug")]public void CameraShakeEffect(PlayerVar inVarPlayer, PlayerListVar inVarPlayerList, TimeVar inVarDuration, FloatVar inVarIntensity, TimeVar inVarTrailOffDuration, FloatVar inVarConservationFactor) {

}
[Node(name:"RumbleStart", menu:"Debug")]public void RumbleStartEffect(PlayerVar inVarPlayer, RumbleTypeVar inVarLeftRumbleType, FloatVar inVarLeftStrength, RumbleTypeVar inVarRightRumbleType, FloatVar inVarRightStrength, FloatVar inVarDuration, StringVar inVarPattern, BoolVar inVarLoop, IntegerVar outVarRumbleID) {

}
[Node(name:"AttachmentAddType", menu:"Debug")]public void AttachmentAddTypeEffect(UnitVar inVarReceivingUnit, UnitListVar inVarReceivingUnitList, SquadVar inVarReceivingSquad, SquadListVar inVarReceivingSquadList, ProtoObjectVar inVarAddProtoObject) {

}
[Node(name:"SetPlayerPop", menu:"Debug")]public void SetPlayerPopEffect(PlayerVar inVarPlayer, FloatVar inVarPopCap, FloatVar inVarPopMax, FloatVar inVarPopFuture, FloatVar inVarPopExisting) {

}
[Node(name:"FlashUIElement", menu:"Debug")]public void FlashUIElementEffect(FlashableUIItemVar inVarUIElement, BoolVar inVarOn, PlayerVar inVarPlayer) {

}
[Node(name:"LocationListRemove", menu:"Debug")]public void LocationListRemoveEffect(VectorListVar inVarSrcList, VectorVar inVarRemoveLocation, VectorListVar inVarRemoveLocationList, BoolVar inVarRemoveAll) {

}
[Node(name:"TimerDestroy", menu:"Debug")]public void TimerDestroyEffect(IntegerVar inVarTimerID) {

}
[Node(name:"BuildingCommand", menu:"Debug")]public void BuildingCommandEffect(UnitVar inVarUnit, ProtoSquadVar inVarProtoSquad, TechVar inVarTech, IntegerVar inVarCount, BoolVar inVarNoCost, ProtoObjectVar inVarProtoBuilding, PlayerVar inVarPlayer, BuildingCommandStateVar outVarBuildingCommandState) {

}
[Node(name:"GetPlayerPop", menu:"Debug")]public void GetPlayerPopEffect(PlayerVar inVarPlayer, FloatVar outVarTotalPop, FloatVar outVarMaxPop, FloatVar outVarFuturePop, FloatVar outVarExistingPop) {

}
[Node(name:"GetParentSquad", menu:"Debug")]public void GetParentSquadEffect(UnitVar inVarUnit, SquadVar outVarParentSquad) {

}
[Node(name:"ChangeSquadMode", menu:"Debug")]public void ChangeSquadModeEffect(SquadVar inVarSquad, SquadListVar inVarSquadList, SquadModeVar inVarSquadMode, BoolVar inVarSetDirectly) {

}
[Node(name:"PlayAnimationSquad", menu:"Debug")]public void PlayAnimationSquadEffect(SquadVar inVarSquadToAnimate, AnimTypeVar inVarAnimType, TimeVar outVarAnimDuration) {

}
[Node(name:"PlayWorldSoundOnEntity", menu:"Debug")]public void PlayWorldSoundOnEntityEffect(SoundVar inVarSound, UnitVar inVarUnit, SquadVar inVarSquad, ObjectVar inVarObject, BoolVar inVarQueue) {

}
[Node(name:"AttachmentRemoveType", menu:"Debug")]public void AttachmentRemoveTypeEffect(UnitVar inVarUnit, UnitListVar inVarUnitList, SquadVar inVarSquad, SquadListVar inVarSquadList, ProtoObjectVar inVarAttachmentType) {

}
[Node(name:"ResetDopple", menu:"Debug")]public void ResetDoppleEffect(UnitVar inVarUnit, UnitListVar inVarUnitList, SquadVar inVarSquad, SquadListVar inVarSquadList, ObjectVar inVarObject, ObjectListVar inVarObjectList, BoolVar inVarGrayMapDopples, BoolVar inVarDopples) {

}
[Node(name:"SquadListGetSize", menu:"Debug")]public void SquadListGetSizeEffect(SquadListVar inVarSquadList, IntegerVar outVarSize) {

}
[Node(name:"CopyCount", menu:"Debug")]public void CopyCountEffect(IntegerVar inVarCountSource, IntegerVar outVarCountCopy) {

}
[Node(name:"CountIncrement", menu:"Debug")]public void CountIncrementEffect(IntegerVar inVarCount, IntegerVar outVarCount) {

}
[Node(name:"IteratorPlayerList", menu:"Debug")]public void IteratorPlayerListEffect(PlayerListVar inVarPlayerList, IteratorVar outVarInitializedIterator) {

}
[Node(name:"AIMissionGetTarget", menu:"Debug")]public void AIMissionGetTargetEffect(IntegerVar inVarMissionID, IntegerVar outVarTargetID) {

}
[Node(name:"AIMissionTargetGetLocation", menu:"Debug")]public void AIMissionTargetGetLocationEffect(IntegerVar inVarTargetID, VectorVar outVarLocation, FloatVar outVarRadius) {

}
[Node(name:"GetPlayers2", menu:"Debug")]public void GetPlayers2Effect(BoolVar inVarIncludeGaia, BoolVar inVarIncludeSelf, PlayerStateVar inVarPlayerState, PlayerVar inVarTestPlayer, DiplomacyVar inVarRelationType, PlayerListVar outVarPlayerList) {

}
[Node(name:"FilterAddIsAlive", menu:"Debug")]public void FilterAddIsAliveEffect(BoolVar inVarinvertFilter, EntityFilterSetVar outVarEntityFilterSet) {

}
[Node(name:"SetResources", menu:"Debug")]public void SetResourcesEffect(PlayerVar inVarPlayer, CostVar inVarResources) {

}
[Node(name:"RallyPointSet", menu:"Debug")]public void RallyPointSetEffect(PlayerVar inVarPlayer, VectorVar inVarLocation, UnitVar inVarBase, UnitVar inVarRallyTargetUnit) {

}
[Node(name:"AIAnalyzeSquadList", menu:"Debug")]public void AIAnalyzeSquadListEffect(SquadListVar inVarSquadList, AISquadAnalysisVar outVarAISquadAnalysis) {

}
[Node(name:"AICalculateOffenseRatioAToB", menu:"Debug")]public void AICalculateOffenseRatioAToBEffect(AISquadAnalysisVar inVarAnalysisA, AISquadAnalysisVar inVarAnalysisB, FloatVar outVarRatioAToB) {

}
[Node(name:"LerpPercent", menu:"Debug")]public void LerpPercentEffect(FloatVar inVarPercent1, FloatVar inVarPercent2, FloatVar inVarLerpPercent, FloatVar outVarResult) {

}
[Node(name:"LerpTime", menu:"Debug")]public void LerpTimeEffect(TimeVar inVarTime1, TimeVar inVarTime2, FloatVar inVarLerpPercent, TimeVar outVarResult) {

}
[Node(name:"LerpInt", menu:"Debug")]public void LerpIntEffect(IntegerVar inVarInt1, IntegerVar inVarInt2, FloatVar inVarPercent, IntegerVar outVarResult) {

}
[Node(name:"ProtoSquadListRemove", menu:"Debug")]public void ProtoSquadListRemoveEffect(ProtoSquadVar inVarRemoveOne, ProtoSquadListVar inVarRemoveList, BoolVar inVarRemoveAll, ProtoSquadListVar outVarModifyList) {

}
[Node(name:"LocationListGetSize", menu:"Debug")]public void LocationListGetSizeEffect(VectorListVar inVarLocationList, IntegerVar outVarSize) {

}
[Node(name:"IntegerListGetSize", menu:"Debug")]public void IntegerListGetSizeEffect(IntegerListVar inVarIntegerList, IntegerVar outVarSize) {

}
[Node(name:"ProtoSquadListAdd", menu:"Debug")]public void ProtoSquadListAddEffect(ProtoSquadVar inVarAddProtoSquad, ProtoSquadListVar inVarAddProtoSquadList, BoolVar inVarClearExisting, ProtoSquadListVar outVarDestList) {

}
[Node(name:"FilterAddProtoSquads", menu:"Debug")]public void FilterAddProtoSquadsEffect(ProtoSquadListVar inVarProtoSquadList, BoolVar inVarinvertFilter, EntityFilterSetVar outVarEntityFilterSet) {

}
[Node(name:"IntDecrement", menu:"Debug")]public void IntDecrementEffect(IntegerVar inVarOriginalInt, IntegerVar outVarDecrementedInt) {

}
[Node(name:"GetPop", menu:"Debug")]public void GetPopEffect(ProtoObjectVar inVarProtoObject, ProtoSquadVar inVarProtoSquad, FloatVar outVarPop, BoolVar outVarIsUnitPop, IntegerVar outVarPopID) {

}
[Node(name:"ProtoSquadListShuffle", menu:"Debug")]public void ProtoSquadListShuffleEffect(ProtoSquadListVar inVarProtoSquadList) {

}
[Node(name:"GetUnits", menu:"Debug")]public void GetUnitsEffect(PlayerVar inVarFilterPlayer, ObjectTypeVar inVarFilterObjectType, VectorVar inVarFilterLocation, FloatVar inVarFilterDistance, UnitListVar inVarFilterUnitList, UnitListVar outVarFoundUnits, IntegerVar outVarFoundUnitCount) {

}
[Node(name:"UnitListFilter", menu:"Debug")]public void UnitListFilterEffect(UnitListVar inVarSourceUnitList, EntityFilterSetVar inVarEntityFilterSet, UnitListVar outVarPassedUnitList, UnitListVar outVarFailedUnitList) {

}
[Node(name:"PlayerListGetSize", menu:"Debug")]public void PlayerListGetSizeEffect(PlayerListVar inVarPlayerList, IntegerVar outVarSize) {

}
[Node(name:"IntegerListAdd", menu:"Debug")]public void IntegerListAddEffect(IntegerVar inVarAddInt, IntegerListVar inVarAddList, BoolVar inVarClearExisting, IntegerListVar outVarDestList) {

}
[Node(name:"AISetScoringParms", menu:"Debug")]public void AISetScoringParmsEffect(PlayerVar inVarPlayer, VectorVar inVarLocation, SquadListVar inVarSquadList) {

}
[Node(name:"AIGetMissionTargets", menu:"Debug")]public void AIGetMissionTargetsEffect(PlayerVar inVarPlayer, MissionTargetTypeVar inVarMissionTargetType, MissionTypeVar inVarMissionType, BoolVar inVarIgnoreNonScoringTargets, BoolVar inVarIgnoreGaiaBases, IntegerListVar outVarMissionTargetIDs) {

}
[Node(name:"AIScoreMissionTargets", menu:"Debug")]public void AIScoreMissionTargetsEffect(PlayerVar inVarPlayer, IntegerListVar inVarMissionTargetIDs) {

}
[Node(name:"AISortMissionTargets", menu:"Debug")]public void AISortMissionTargetsEffect(PlayerVar inVarPlayer, IntegerListVar inVarSortTargetIDs) {

}
[Node(name:"AIAnalyzeProtoSquadList", menu:"Debug")]public void AIAnalyzeProtoSquadListEffect(ProtoSquadListVar inVarProtoSquadList, PlayerVar inVarPlayer, AISquadAnalysisVar outVarAISquadAnalysis) {

}
[Node(name:"AISAGetComponent", menu:"Debug")]public void AISAGetComponentEffect(AISquadAnalysisVar inVarAISquadAnalysis, AISquadAnalysisComponentVar inVarAISquadAnalysisComponent, FloatVar outVarComponent) {

}
[Node(name:"GetCost", menu:"Debug")]public void GetCostEffect(PlayerVar inVarPlayer, ProtoSquadVar inVarProtoSquad, TechVar inVarTech, ProtoObjectVar inVarProtoObject, CostVar outVarCost) {

}
[Node(name:"CostToFloat", menu:"Debug")]public void CostToFloatEffect(CostVar inVarCost, FloatVar inVarSupplyCoefficient, FloatVar inVarPowerCoefficient, FloatVar inVarChargesCoefficient, FloatVar outVarResult) {

}
[Node(name:"CopyAISquadAnalysis", menu:"Debug")]public void CopyAISquadAnalysisEffect(AISquadAnalysisVar inVarAISquadAnalysisSource, AISquadAnalysisVar outVarAISquadAnalysisCopy) {

}
[Node(name:"GetPlayerEconomy", menu:"Debug")]public void GetPlayerEconomyEffect(PlayerVar inVarPlayer, FloatVar outVarSupplies, FloatVar outVarSupplyRate, FloatVar outVarPower, FloatVar outVarPowerRate, FloatVar outVarLeaderPower, FloatVar outVarLeaderPowerRate, FloatVar outVarLeaderPowerCharges) {

}
[Node(name:"EnableFogOfWar", menu:"Debug")]public void EnableFogOfWarEffect(BoolVar inVarEnable) {

}
[Node(name:"SetMinimapSkirtMirroring", menu:"Debug")]public void SetMinimapSkirtMirroringEffect(BoolVar inVarEnableMirroring) {

}
[Node(name:"RandomInt", menu:"Debug")]public void RandomIntEffect(IntegerVar inVarMin, IntegerVar inVarMax, IntegerVar outVarRandom) {

}
[Node(name:"TeamSetDiplomacy", menu:"Debug")]public void TeamSetDiplomacyEffect(TeamVar inVarSourceTeam, TeamListVar inVarSourceTeamList, DiplomacyVar inVarDiplomacy, TeamVar inVarTargetTeam, TeamListVar inVarTargetTeamList) {

}
[Node(name:"CopyProtoObject", menu:"Debug")]public void CopyProtoObjectEffect(ProtoObjectVar inVarProtoObjectSource, ProtoObjectVar outVarProtoObjectCopy) {

}
[Node(name:"GetDirectionFromLocations", menu:"Debug")]public void GetDirectionFromLocationsEffect(VectorVar inVarLocation1, VectorVar inVarLocation2, VectorVar outVarDirection) {

}
[Node(name:"FilterAddProtoObjects", menu:"Debug")]public void FilterAddProtoObjectsEffect(ProtoObjectListVar inVarProtoObjectList, BoolVar inVarinvertFilter, EntityFilterSetVar outVarEntityFilterSet) {

}
[Node(name:"PlayAnimationUnit", menu:"Debug")]public void PlayAnimationUnitEffect(UnitVar inVarUnitToAnimate, AnimTypeVar inVarAnimType, TimeVar outVarAnimDuration) {

}
[Node(name:"CalculatePercentTime", menu:"Debug")]public void CalculatePercentTimeEffect(TimeVar inVarTestTime, TimeVar inVarStartTime, TimeVar inVarControlTime, FloatVar outVarResultPercentage) {

}
[Node(name:"LerpLocation", menu:"Debug")]public void LerpLocationEffect(VectorVar inVarLocation1, VectorVar inVarLocation2, FloatVar inVarLerpPercent, VectorVar outVarResult) {

}
[Node(name:"SetPosition", menu:"Debug")]public void SetPositionEffect(ObjectVar inVarObject, UnitVar inVarUnit, VectorVar inVarPosition) {

}
[Node(name:"GetObstructionRadius", menu:"Debug")]public void GetObstructionRadiusEffect(UnitVar inVarUnit, SquadVar inVarSquad, ObjectVar inVarObject, ProtoObjectVar inVarProtoObject, FloatVar outVarMaxRadius, FloatVar outVarRadiusX, FloatVar outVarRadiusY, FloatVar outVarRadiusZ) {

}
[Node(name:"LocationAdjustDir", menu:"Debug")]public void LocationAdjustDirEffect(VectorVar inVarSourceLocation, VectorVar inVarDirection, FloatVar inVarDistance, VectorVar outVarResultLocation) {

}
[Node(name:"TimeToFloat", menu:"Debug")]public void TimeToFloatEffect(TimeVar inVarTime, FloatVar outVarTotalSeconds, FloatVar outVarTotalMS) {

}
[Node(name:"GetChildUnits", menu:"Debug")]public void GetChildUnitsEffect(SquadVar inVarSquad, SquadListVar inVarSquadList, UnitListVar outVarChildUnits) {

}
[Node(name:"CopyProtoObjectList", menu:"Debug")]public void CopyProtoObjectListEffect(ProtoObjectListVar inVarSourceList, ProtoObjectListVar outVarDestList) {

}
[Node(name:"CopyPercent", menu:"Debug")]public void CopyPercentEffect(FloatVar inVarPercentSource, FloatVar outVarPercentCopy) {

}
[Node(name:"CopyDesignLine", menu:"Debug")]public void CopyDesignLineEffect(DesignLineVar inVarSrcLine, DesignLineVar outVarDestLine) {

}
[Node(name:"DesignLineListAdd", menu:"Debug")]public void DesignLineListAddEffect(DesignLineVar inVarAddLine, DesignLineListVar inVarAddList, BoolVar inVarClearExisting, DesignLineListVar outVarDestList) {

}
[Node(name:"Damage", menu:"Debug")]public void DamageEffect(SquadVar inVarSquad, SquadListVar inVarSquadList, UnitVar inVarUnit, UnitListVar inVarUnitList, FloatVar inVarHitpoints, FloatVar inVarHPPercent, FloatVar inVarShieldpoints, FloatVar inVarSPPercent, BoolVar inVarSpreadAmongUnits) {

}
[Node(name:"MathPercent", menu:"Debug")]public void MathPercentEffect(FloatVar inVarFirstPercent, MathOperatorVar inVarMathOperator, FloatVar inVarSecondPercent, FloatVar outVarResultPercent) {

}
[Node(name:"TechDeactivate", menu:"Debug")]public void TechDeactivateEffect(PlayerVar inVarPlayer, TechVar inVarTech) {

}
[Node(name:"RefundCost", menu:"Debug")]public void RefundCostEffect(PlayerVar inVarPlayer, CostVar inVarResourceAmount) {

}
[Node(name:"MegaTurretAttack", menu:"Debug")]public void MegaTurretAttackEffect(SquadVar inVarAttackerSquadID, VectorVar inVarTargetLocation, BoolVar outVarSuccess) {

}
[Node(name:"CopyDesignLineList", menu:"Debug")]public void CopyDesignLineListEffect(DesignLineListVar inVarSrcList, DesignLineListVar outVarDestList) {

}
[Node(name:"CopyObjectTypeList", menu:"Debug")]public void CopyObjectTypeListEffect(ObjectTypeListVar inVarSourceList, ObjectTypeListVar outVarDestList) {

}
[Node(name:"FilterClear", menu:"Debug")]public void FilterClearEffect(EntityFilterSetVar outVarEntityFilterSet) {

}
[Node(name:"FloatListRemove", menu:"Debug")]public void FloatListRemoveEffect(FloatVar inVarRemoveOne, FloatListVar inVarRemoveList, BoolVar inVarRemoveAll, BoolVar inVarRemoveDupes, FloatListVar outVarModifyList) {

}
[Node(name:"DesignLineListGetSize", menu:"Debug")]public void DesignLineListGetSizeEffect(DesignLineListVar inVarDesignLineList, IntegerVar outVarSize) {

}
[Node(name:"GetDistanceLocationLocation", menu:"Debug")]public void GetDistanceLocationLocationEffect(VectorVar inVarLocation1, VectorVar inVarLocation2, FloatVar outVarDistance) {

}
[Node(name:"FloatListAdd", menu:"Debug")]public void FloatListAddEffect(FloatVar inVarAddFloat, FloatListVar inVarAddList, BoolVar inVarClearExisting, FloatListVar outVarDestList) {

}
[Node(name:"CopyFloatList", menu:"Debug")]public void CopyFloatListEffect(FloatListVar inVarSrcList, FloatListVar outVarDestList) {

}
[Node(name:"SquadListPartition", menu:"Debug")]public void SquadListPartitionEffect(SquadListVar inVarSrcSquadList, FloatVar inVarPercentToA, IntegerVar inVarNumToA, SquadListVar outVarSquadListA, SquadListVar outVarSquadListB) {

}
[Node(name:"DesignLineListRemove", menu:"Debug")]public void DesignLineListRemoveEffect(DesignLineVar inVarRemoveLine, DesignLineListVar inVarRemoveList, BoolVar inVarRemoveAll, BoolVar inVarRemoveDupes, DesignLineListVar outVarModifyList) {

}
[Node(name:"RandomCount", menu:"Debug")]public void RandomCountEffect(IntegerVar inVarMin, IntegerVar inVarMax, IntegerVar outVarRandom) {

}
[Node(name:"CopyUnit", menu:"Debug")]public void CopyUnitEffect(UnitVar inVarUnitSource, UnitVar outVarUnitCopy) {

}
[Node(name:"PowerClear", menu:"Debug")]public void PowerClearEffect(PlayerVar inVarPlayer, PlayerListVar inVarPlayerList) {

}
[Node(name:"SetTeleporterDestination", menu:"Debug")]public void SetTeleporterDestinationEffect(SquadVar inVarSource, SquadVar inVarTarget) {

}
[Node(name:"ObjectiveDecrementCounter", menu:"Debug")]public void ObjectiveDecrementCounterEffect(ObjectiveVar inVarObjective, IntegerVar inVarAmount, IntegerVar outVarCurrentCount) {

}
[Node(name:"EnableMusicManager", menu:"Debug")]public void EnableMusicManagerEffect(BoolVar inVarEnabled) {

}
[Node(name:"MathHitpoints", menu:"Debug")]public void MathHitpointsEffect(FloatVar inVarFirstHitpoints, MathOperatorVar inVarMathOperator, FloatVar inVarSecondHitpoints, FloatVar outVarResultHitpoints) {

}
[Node(name:"GetResources", menu:"Debug")]public void GetResourcesEffect(PlayerVar inVarPlayer, CostVar outVarResources) {

}
[Node(name:"MathResources", menu:"Debug")]public void MathResourcesEffect(CostVar inVarFirstResource, MathOperatorVar inVarMathOperator, CostVar inVarSecondResource, CostVar outVarResultResource) {

}
[Node(name:"GetLegalSquads", menu:"Debug")]public void GetLegalSquadsEffect(PlayerVar inVarPlayer, ProtoSquadListVar outVarProtoSquadList, IntegerVar outVarCount) {

}
[Node(name:"UnitListGetSize", menu:"Debug")]public void UnitListGetSizeEffect(UnitListVar inVarUnitList, IntegerVar outVarSize) {

}
[Node(name:"GetProtoObject", menu:"Debug")]public void GetProtoObjectEffect(UnitVar inVarUnit, ObjectVar inVarObject, ProtoSquadVar inVarProtoSquad, ProtoObjectVar outVarProtoObject) {

}
[Node(name:"GetClosestUnit", menu:"Debug")]public void GetClosestUnitEffect(UnitListVar inVarUnitList, VectorVar inVarTestLocation, UnitVar outVarClosestUnit) {

}
[Node(name:"CopyTech", menu:"Debug")]public void CopyTechEffect(TechVar inVarTechSource, TechVar outVarTechCopy) {

}
[Node(name:"ClearBuildingCommandState", menu:"Debug")]public void ClearBuildingCommandStateEffect(BuildingCommandStateVar outVarBuildingCommandState) {

}
[Node(name:"TechListAdd", menu:"Debug")]public void TechListAddEffect(TechVar inVarAddTech, TechListVar inVarAddTechList, BoolVar inVarClearExisting, TechListVar outVarDestList) {

}
[Node(name:"ProtoObjectListAdd", menu:"Debug")]public void ProtoObjectListAddEffect(ProtoObjectVar inVarAddProtoObject, ProtoObjectListVar inVarAddProtoObjectList, BoolVar inVarClearExisting, ProtoObjectListVar outVarDestList) {

}
[Node(name:"GetSquadTrainerType", menu:"Debug")]public void GetSquadTrainerTypeEffect(PlayerVar inVarPlayer, ProtoSquadVar inVarProtoSquad, ProtoObjectVar outVarProtoObject) {

}
[Node(name:"PlayerListRemove", menu:"Debug")]public void PlayerListRemoveEffect(PlayerListVar inVarSourceList, PlayerVar inVarRemovePlayer, PlayerListVar inVarRemovePlayerList, BoolVar inVarRemoveAll) {

}
[Node(name:"GetLegalTechs", menu:"Debug")]public void GetLegalTechsEffect(PlayerVar inVarPlayer, TechListVar outVarTechList, IntegerVar outVarCount) {

}
[Node(name:"TechListRemove", menu:"Debug")]public void TechListRemoveEffect(TechVar inVarRemoveOne, TechListVar inVarRemoveList, BoolVar inVarRemoveAll, TechListVar outVarModifyList) {

}
[Node(name:"GetTechResearcherType", menu:"Debug")]public void GetTechResearcherTypeEffect(PlayerVar inVarPlayer, TechVar inVarTech, ProtoObjectVar outVarProtoObject) {

}
[Node(name:"ProtoObjectListRemove", menu:"Debug")]public void ProtoObjectListRemoveEffect(ProtoObjectVar inVarRemoveOne, ProtoObjectListVar inVarRemoveList, BoolVar inVarRemoveAll, ProtoObjectListVar outVarModifyList) {

}
[Node(name:"CopyTechList", menu:"Debug")]public void CopyTechListEffect(TechListVar inVarSourceList, TechListVar outVarDestList) {

}
[Node(name:"CopyDistance", menu:"Debug")]public void CopyDistanceEffect(FloatVar inVarDistanceSource, FloatVar outVarDistanceCopy) {

}
[Node(name:"FilterAddJacking", menu:"Debug")]public void FilterAddJackingEffect(BoolVar inVarinvertFilter, EntityFilterSetVar outVarEntityFilterSet) {

}
[Node(name:"GetDirection", menu:"Debug")]public void GetDirectionEffect(UnitVar inVarUnit, SquadVar inVarSquad, ObjectVar inVarObject, VectorVar outVarForward, VectorVar outVarRight, VectorVar outVarUp) {

}
[Node(name:"LocationAdjust", menu:"Debug")]public void LocationAdjustEffect(VectorVar inVarSourceLoc, FloatVar inVarAdjustX, FloatVar inVarAdjustY, FloatVar inVarAdjustZ, VectorVar inVarAdjustVector, BoolVar inVarUseMultiply, VectorVar outVarResultLoc) {

}
[Node(name:"ClearCorpseUnits", menu:"Debug")]public void ClearCorpseUnitsEffect(UnitListVar inVarCorpseUnits, BoolVar inVarLeaveEffect) {

}
[Node(name:"InvertBool", menu:"Debug")]public void InvertBoolEffect(BoolVar inVarCurrent, BoolVar outVarInverse) {

}
[Node(name:"CopyObjectList", menu:"Debug")]public void CopyObjectListEffect(ObjectListVar inVarObjectListSource, ObjectListVar outVarObjectListCopy) {

}
[Node(name:"PatherObstructionUpdates", menu:"Debug")]public void PatherObstructionUpdatesEffect(BoolVar inVarEnablePatherUpdates) {

}
[Node(name:"CreateObstructionUnit", menu:"Debug")]public void CreateObstructionUnitEffect(VectorVar inVarPosition, VectorVar inVarDirection, FloatVar inVarHalfLengthX, FloatVar inVarHalfLengthY, FloatVar inVarHalfLengthZ, BoolVar inVarClearExisting, UnitVar outVarUnit, UnitListVar outVarAddToUnitList) {

}
[Node(name:"PatherObstructionRebuild", menu:"Debug")]public void PatherObstructionRebuildEffect(VectorVar inVarMin, VectorVar inVarMax) {

}
[Node(name:"CustomCommandRemove", menu:"Debug")]public void CustomCommandRemoveEffect(IntegerVar inVarCommandID) {

}
[Node(name:"SetTowerWallDestination", menu:"Debug")]public void SetTowerWallDestinationEffect(SquadVar inVarSourceTower, SquadVar inVarDestTower) {

}
[Node(name:"FilterAddTeams", menu:"Debug")]public void FilterAddTeamsEffect(TeamListVar inVarTeamList, BoolVar inVarinvertFilter, EntityFilterSetVar outVarEntityFilterSet) {

}
[Node(name:"CustomCommandAdd", menu:"Debug")]public void CustomCommandAddEffect(UnitVar inVarUnit, IntegerVar inVarIconPosition, StringVar inVarIconName, CostVar inVarCost, FloatVar inVarTimer, IntegerVar inVarLimit, IntegerVar inVarNameStringID, IntegerVar inVarInfoStringID, IntegerVar inVarHelpStringID, BoolVar inVarQueue, BoolVar inVarAllowMultiple, BoolVar inVarShowLimit, BoolVar inVarCloseMenu, BoolVar inVarPersistent, BoolVar inVarUnavailable, BoolVar inVarAllowCancel, IntegerVar outVarCommandID) {

}
[Node(name:"RefCountSquadAdd", menu:"Debug")]public void RefCountSquadAddEffect(SquadVar inVarSquad, SquadListVar inVarSquadList, RefCountTypeVar inVarRefCountType, IntegerVar outVarMaxCount) {

}
[Node(name:"CopyObjectType", menu:"Debug")]public void CopyObjectTypeEffect(ObjectTypeVar inVarObjectTypeSource, ObjectTypeVar outVarObjectTypeCopy) {

}
[Node(name:"HintGlowToggle", menu:"Debug")]public void HintGlowToggleEffect(UnitVar inVarUnit, UnitListVar inVarUnitList, SquadVar inVarSquad, SquadListVar inVarSquadList, ObjectVar inVarObject, ObjectListVar inVarObjectList, BoolVar inVarOnOff) {

}
[Node(name:"SetMinimapNorthPointerRotation", menu:"Debug")]public void SetMinimapNorthPointerRotationEffect(FloatVar inVarRotationValue) {

}
[Node(name:"EnableChats", menu:"Debug")]public void EnableChatsEffect(BoolVar inVarEnable) {

}
[Node(name:"TimerSetPaused", menu:"Debug")]public void TimerSetPausedEffect(IntegerVar inVarTimerID, BoolVar inVarPaused) {

}
[Node(name:"SetRenderTerrainSkirt", menu:"Debug")]public void SetRenderTerrainSkirtEffect(BoolVar inVarRender) {

}
[Node(name:"FilterAddIsIdle", menu:"Debug")]public void FilterAddIsIdleEffect(BoolVar inVarInvertFilter, EntityFilterSetVar outVarEntityFilterSet) {

}
[Node(name:"SetGarrisonedCount", menu:"Debug")]public void SetGarrisonedCountEffect(IntegerVar inVarWidgetID, BoolVar inVarVisible, IntegerVar inVarNumGarrisoned) {

}
[Node(name:"TeleportUnitsOffObstruction", menu:"Debug")]public void TeleportUnitsOffObstructionEffect(UnitVar inVarUnit) {

}
[Node(name:"GetGarrisonedSquads", menu:"Debug")]public void GetGarrisonedSquadsEffect(UnitVar inVarContainerUnit, BoolVar inVarOnlyCompletelyGarrisoned, SquadListVar outVarGarrisonedSquads, IntegerVar outVarNumGarrisoned) {

}
[Node(name:"GetClosestSquad", menu:"Debug")]public void GetClosestSquadEffect(SquadListVar inVarSquadList, VectorVar inVarTestLoc, SquadVar outVarClosestSquad) {

}
[Node(name:"SetCamera", menu:"Debug")]public void SetCameraEffect(PlayerVar inVarPlayer, PlayerListVar inVarPlayerList, BoolVar inVarEnableScroll, BoolVar inVarEnableYaw, BoolVar inVarEnableZoom, VectorVar inVarLocation, VectorVar inVarDirection, BoolVar inVarAbsolutePos, BoolVar inVarAbsoluteDir, FloatVar inVarHeightOffset) {

}
[Node(name:"UITogglePowerOverlay", menu:"Debug")]public void UITogglePowerOverlayEffect(PowerVar inVarProtoPowerID, BoolVar inVarOnOff, PlayerVar inVarPlayerID) {

}
[Node(name:"IgnoreDpad", menu:"Debug")]public void IgnoreDpadEffect(PlayerVar inVarPlayer, PlayerListVar inVarPlayerList, BoolVar inVarIgnore) {

}
[Node(name:"EventFilterNumeric", menu:"Debug")]public void EventFilterNumericEffect(IntegerVar inVarEventID, OperatorVar inVarCompare, IntegerVar inVarInteger, FloatVar inVarFloat) {

}
[Node(name:"SetLevel", menu:"Debug")]public void SetLevelEffect(SquadVar inVarSquad, SquadListVar inVarSquadList, IntegerVar inVarLevel) {

}
[Node(name:"PowerUserShutdown", menu:"Debug")]public void PowerUserShutdownEffect(PlayerVar inVarPlayer, PowerVar inVarPower) {

}
[Node(name:"SetUnitAttackTarget", menu:"Debug")]public void SetUnitAttackTargetEffect(UnitVar inVarUnit, UnitVar inVarTargetUnit, VectorVar inVarTargetLocation) {

}
[Node(name:"GetPlayerTeam", menu:"Debug")]public void GetPlayerTeamEffect(PlayerVar inVarPlayer, TeamVar outVarTeam) {

}
[Node(name:"LocationListGetClosest", menu:"Debug")]public void LocationListGetClosestEffect(VectorListVar inVarVectorList, VectorVar inVarTestLoc, BoolVar inVarOnPath, VectorVar outVarClosestLoc, IntegerVar outVarClosestIndex) {

}
[Node(name:"LocationListGetByIndex", menu:"Debug")]public void LocationListGetByIndexEffect(VectorListVar inVarLocations, IntegerVar inVarIndex, VectorVar outVarPrevLoc, VectorVar outVarCurrentLoc, VectorVar outVarNextLoc) {

}
[Node(name:"UnitListDiff", menu:"Debug")]public void UnitListDiffEffect(UnitListVar inVarListA, UnitListVar inVarListB, UnitListVar outVarOnlyInA, UnitListVar outVarOnlyInB, UnitListVar outVarInBoth) {

}
[Node(name:"Settle", menu:"Debug")]public void SettleEffect(UnitVar inVarUnit, UnitListVar inVarUnitList, SquadVar inVarSquad, SquadListVar inVarSquadList) {

}
[Node(name:"UserMessage", menu:"Debug")]public void UserMessageEffect(PlayerVar inVarPlayer, PlayerListVar inVarPlayerList, StringVar inVarString, MessageIndexVar inVarMessageIndex, FloatVar inVarXPos, FloatVar inVarYPos, MessageJustifyVar inVarMessageJustify, MessagePointVar inVarMessagePoint, FloatVar inVarAlpha, ColorVar inVarColor, BoolVar inVarEnabled) {

}
[Node(name:"SetOverrideTint", menu:"Debug")]public void SetOverrideTintEffect(UnitVar inVarUnit, UnitListVar inVarUnitList, SquadVar inVarSquad, SquadListVar inVarSquadList, ObjectVar inVarObject, ObjectListVar inVarObjectList, ColorVar inVarTintColor, FloatVar inVarTintAlpha, BoolVar inVarEnable) {

}
[Node(name:"Infect", menu:"Debug")]public void InfectEffect(PlayerVar inVarFloodPlayer, SquadVar inVarSquad, SquadListVar inVarSquadList, UnitVar inVarUnit, UnitListVar inVarUnitList, BoolVar inVarKill) {

}
[Node(name:"CopyString", menu:"Debug")]public void CopyStringEffect(StringVar inVarStringSource, StringVar outVarStringCopy) {

}
[Node(name:"FilterAddRefCount", menu:"Debug")]public void FilterAddRefCountEffect(RefCountTypeVar inVarRefCountType, OperatorVar inVarCompareType, IntegerVar inVarCompareCount, BoolVar inVarinvertFilter, EntityFilterSetVar outVarEntityFilterSet) {

}
[Node(name:"AISetAssetMultipliers", menu:"Debug")]public void AISetAssetMultipliersEffect(PlayerVar inVarPlayer, IntegerVar inVarMissionID, BoolVar inVarClear, ObjectTypeVar inVarObjectType1, FloatVar inVarcValue1, ObjectTypeVar inVarObjectType2, FloatVar inVarcValue2, ObjectTypeVar inVarObjectType3, FloatVar inVarcValue3) {

}
[Node(name:"AISetPlayerAssetModifier", menu:"Debug")]public void AISetPlayerAssetModifierEffect(PlayerVar inVarPlayer, PlayerVar inVarModifyPlayer, PlayerListVar inVarModifyPlayerList, FloatVar inVarModifier) {

}
[Node(name:"ShowMessage", menu:"Debug")]public void ShowMessageEffect(PlayerVar inVarPlayer, PlayerListVar inVarPlayerList, SoundVar inVarSound, BoolVar inVarQueueSound, LocStringIDVar inVarMessage, TimeVar inVarduration) {

}
[Node(name:"GetPlayers", menu:"Debug")]public void GetPlayersEffect(BoolVar inVarIncludeGaia, PlayerStateVar inVarPlayerState, PlayerListVar outVarPlayerList) {

}
[Node(name:"GetNPCPlayersByName", menu:"Debug")]public void GetNPCPlayersByNameEffect(StringVar inVarNPCPlayerName, PlayerStateVar inVarNPCPlayerState, PlayerListVar outVarNPCPlayerList) {

}
[Node(name:"TeamListRemove", menu:"Debug")]public void TeamListRemoveEffect(TeamListVar inVarSourceList, TeamVar inVarRemoveTeam, TeamListVar inVarRemoveTeamList, BoolVar inVarRemoveAll) {

}
[Node(name:"GetTeams", menu:"Debug")]public void GetTeamsEffect(TeamListVar outVarTeamList) {

}
[Node(name:"GetTeamPlayers", menu:"Debug")]public void GetTeamPlayersEffect(TeamVar inVarTeam, PlayerListVar outVarPlayerList) {

}
[Node(name:"TeamListAdd", menu:"Debug")]public void TeamListAddEffect(TeamVar inVarAddTeam, TeamListVar inVarAddTeamList, TeamListVar outVarTeamList, BoolVar outVarClearExisting) {

}
[Node(name:"setCTFCount", menu:"Debug")]public void setCTFCountEffect(IntegerVar inVarWidgetID, BoolVar inVarVisible, IntegerVar inVarCount, LocStringIDVar inVarTitle) {

}
[Node(name:"MathLocation", menu:"Debug")]public void MathLocationEffect(VectorVar inVarFirstLocation, MathOperatorVar inVarMathOperator, VectorVar inVarSecondLocation, VectorVar outVarResultLocation) {

}
[Node(name:"PlaySoundFile", menu:"Debug")]public void PlaySoundFileEffect(StringVar inVarFileName, PlayerVar inVarPlayer) {

}
[Node(name:"SetCTFFlag", menu:"Debug")]public void SetCTFFlagEffect(SquadVar inVarSquad) {

}
[Node(name:"AttachmentAddObject", menu:"Debug")]public void AttachmentAddObjectEffect(UnitVar inVarReceivingUnit, SquadVar inVarReceivingSquad, ObjectVar inVarAddObject, ObjectListVar inVarAddObjectList) {

}
[Node(name:"GrantAchievementToPlayer", menu:"Debug")]public void GrantAchievementToPlayerEffect(StringVar inVarName, PlayerVar inVarPlayer) {

}
[Node(name:"GetCTFFlag", menu:"Debug")]public void GetCTFFlagEffect(SquadVar outVarSquad) {

}
[Node(name:"IteratorTeamList", menu:"Debug")]public void IteratorTeamListEffect(TeamListVar inVarTeamList, IteratorVar outVarInitializedIterator) {

}
[Node(name:"InputUIButton", menu:"Debug")]public void InputUIButtonEffect(PlayerVar inVarPlayer, ControlTypeVar inVarControlType, BoolVar inVarSpeedModifier, BoolVar inVarActionModifier, BoolVar inVarOverride, BoolVar inVarOnRelease, BoolVar inVarContinuous, UIButtonVar outVarUIButton) {

}
[Node(name:"GetDistanceUnitLocation", menu:"Debug")]public void GetDistanceUnitLocationEffect(UnitVar inVarUnit, VectorVar inVarLocation, FloatVar outVarDistance) {

}
[Node(name:"InputUILocation", menu:"Debug")]public void InputUILocationEffect(PlayerVar inVarPlayer, ProtoObjectVar inVarProtoObject, BoolVar inVarCheckObstruction, LOSTypeVar inVarLOSType, PlacementRuleVar inVarPlacementRule, BoolVar inVarLOSCenterOnly, BoolVar inVarCheckMoving, BoolVar inVarSuggestPlacement, ProtoSquadVar inVarProtoSquad, BoolVar inVarUseProtoSquadObstruction, UILocationVar outVarUILocation) {

}
[Node(name:"UIUnlock", menu:"Debug")]public void UIUnlockEffect(PlayerVar inVarPlayer) {

}
[Node(name:"GetPlayerCiv", menu:"Debug")]public void GetPlayerCivEffect(PlayerVar inVarPlayer, CivVar outVarCiv) {

}
[Node(name:"GetPlayerLeader", menu:"Debug")]public void GetPlayerLeaderEffect(PlayerVar inVarPlayer, LeaderVar outVarLeader) {

}
[Node(name:"EventFilterGameState", menu:"Debug")]public void EventFilterGameStateEffect(IntegerVar inVarEventID, PlayerVar inVarPlayer, GameStatePredicateVar inVarGameStatePredicate, BoolVar inVarInvert, EntityFilterSetVar inVarEntityFilter, IntegerVar inVarEntityMinMatches, TechVar inVarTech, CostVar inVarCost) {

}
[Node(name:"FilterAddIsSelected", menu:"Debug")]public void FilterAddIsSelectedEffect(PlayerVar inVarPlayer, BoolVar inVarInvert, EntityFilterSetVar outVarEntityFilterSet) {

}
[Node(name:"FilterAddMaxObjectType", menu:"Debug")]public void FilterAddMaxObjectTypeEffect(ObjectTypeVar inVarObjectType, IntegerVar inVarMaxCount, BoolVar inVarApplyToSquads, BoolVar inVarApplyToUnits, BoolVar inVarInvertFilter, EntityFilterSetVar outVarEntityFilterSet) {

}
[Node(name:"ConceptResetCooldown", menu:"Debug")]public void ConceptResetCooldownEffect(PlayerVar inVarPlayer, ConceptVar inVarConcept, BoolVar inVarResetIncrementedTime) {

}
[Node(name:"ConceptSetPrecondition", menu:"Debug")]public void ConceptSetPreconditionEffect(PlayerVar inVarPlayer, ConceptVar inVarConcept, IntegerVar inVarPrecondition) {

}
[Node(name:"ConceptSetState", menu:"Debug")]public void ConceptSetStateEffect(PlayerVar inVarPlayer, ConceptVar inVarConcept, IntegerVar inVarState) {

}
[Node(name:"ConceptStartSub", menu:"Debug")]public void ConceptStartSubEffect(PlayerVar inVarPlayer, ConceptVar inVarConcept, ConceptVar inVarParentConcept, TimeVar inVarTime) {

}
[Node(name:"ConceptGetParameters", menu:"Debug")]public void ConceptGetParametersEffect(PlayerVar inVarPlayer, ConceptVar inVarConcept, IntegerVar inVarPage, VectorVar outVarVector, BoolVar outVarIsVectorSet, SquadListVar outVarSquadList, BoolVar outVarIsSquadListSet, UnitListVar outVarUnitList, BoolVar outVarIsUnitListSet, EntityFilterSetVar outVarEntityFilterSet, BoolVar outVarIsEntityFilterSet, FloatVar outVarFloat, BoolVar outVarIsFloatSet, ObjectTypeVar outVarObjectType, BoolVar outVarIsObjectTypeSet, LocStringIDVar outVarLocStringID, BoolVar outVarIsLocStringIDSet) {

}
[Node(name:"Cloak", menu:"Debug")]public void CloakEffect(UnitVar inVarUnit, UnitListVar inVarUnitList, SquadVar inVarSquad, SquadListVar inVarSquadList, BoolVar inVarCloak) {

}
[Node(name:"UnitFlagSet", menu:"Debug")]public void UnitFlagSetEffect(UnitVar inVarUnit, UnitListVar inVarUnitList, SquadVar inVarSquad, SquadListVar inVarSquadList, UnitFlagVar inVarFlagType, BoolVar inVarFlagValue) {

}
[Node(name:"LaunchProjectile", menu:"Debug")]public void LaunchProjectileEffect(PlayerVar inVarProjectileOwner, ProtoObjectVar inVarProjectileProto, VectorVar inVarStartLoc, VectorVar inVarTargetLoc, UnitVar inVarTargetUnit) {

}
[Node(name:"PowerChargeUseOf", menu:"Debug")]public void PowerChargeUseOfEffect(PlayerVar inVarOwner, PowerVar inVarPower, SquadVar inVarSquad, SquadVar inVarTarget, FloatVar inVarCostMultiplier) {

}
[Node(name:"LocationListPartition", menu:"Debug")]public void LocationListPartitionEffect(VectorListVar inVarSrcLocationList, FloatVar inVarPercentToA, IntegerVar inVarNumToA, VectorListVar outVarLocationListA, VectorListVar outVarLocationListB) {

}
[Node(name:"SetUIPowerRadius", menu:"Debug")]public void SetUIPowerRadiusEffect(PlayerVar inVarPlayer, PowerVar inVarPower) {

}
[Node(name:"GetNumTransports", menu:"Debug")]public void GetNumTransportsEffect(SquadVar inVarSquad, SquadListVar inVarSquadList, IntegerVar outVarNumTransports) {

}
[Node(name:"TransportSquads", menu:"Debug")]public void TransportSquadsEffect(PlayerVar inVarPlayer, SquadListVar inVarSquadList, VectorVar inVarPickup, VectorVar inVarDropoff, IntegerVar inVarNumTransports) {

}
[Node(name:"SetTransportPickUpLocations", menu:"Debug")]public void SetTransportPickUpLocationsEffect(SquadListVar inVarSquadsToTransport, PlayerVar inVarPlayer, SquadListVar inVarTransportSquads) {

}
[Node(name:"InputUIPlaceSquads", menu:"Debug")]public void InputUIPlaceSquadsEffect(PlayerVar inVarPlayer, SquadVar inVarSquad, SquadListVar inVarSquadList, LOSTypeVar inVarLOSType, UILocationVar outVarUILocation) {

}
[Node(name:"PlayRelationSound", menu:"Debug")]public void PlayRelationSoundEffect(PlayerVar inVarPlayer, SoundVar inVarSelfUnsc, SoundVar inVarAllyUnsc, SoundVar inVarEnemyUnsc, SoundVar inVarSelfCov, SoundVar inVarAllyCov, SoundVar inVarEnemyCov) {

}
[Node(name:"LocationTieToGround", menu:"Debug")]public void LocationTieToGroundEffect(VectorVar inVarSourceLocation, VectorVar outVarGroundLocation) {

}
[Node(name:"AsString", menu:"Debug")]public void AsStringEffect(IntegerVar inVarInt, FloatVar inVarFloat, FloatVar inVarPercent, TimeVar inVarTime, BoolVar inVarHour, BoolVar inVarMinute, BoolVar inVarSecond, BoolVar inVarDecimal, StringVar outVarString) {

}
[Node(name:"RefCountSquadRemove", menu:"Debug")]public void RefCountSquadRemoveEffect(SquadVar inVarSquad, SquadListVar inVarSquadList, RefCountTypeVar inVarRefCountType, IntegerVar outVarMaxCount) {

}
[Node(name:"SetDirection", menu:"Debug")]public void SetDirectionEffect(UnitVar inVarUnit, UnitListVar inVarUnitList, SquadVar inVarSquad, SquadListVar inVarSquadList, ObjectVar inVarObject, ObjectListVar inVarObjectList, VectorVar inVarDirection) {

}
[Node(name:"TransferGarrisoned", menu:"Debug")]public void TransferGarrisonedEffect(UnitVar inVarFromContainerUnit, UnitVar inVarToContainerUnit, SquadVar inVarGarrisonedSquad, SquadListVar inVarGarrisonedSquadList) {

}
[Node(name:"Unload", menu:"Debug")]public void UnloadEffect(SquadVar inVarSquad, SquadListVar inVarSquadList, SquadVar inVarGarrisonedSquad, SquadListVar inVarGarrisonedSquadList) {

}
[Node(name:"CloakDetected", menu:"Debug")]public void CloakDetectedEffect(UnitVar inVarUnit, UnitListVar inVarUnitList, SquadVar inVarSquad, SquadListVar inVarSquadList, BoolVar inVarDetected) {

}
[Node(name:"PayCost", menu:"Debug")]public void PayCostEffect(PlayerVar inVarPlayer, CostVar inVarResourceAmount) {

}
[Node(name:"CopyCost", menu:"Debug")]public void CopyCostEffect(CostVar inVarCostSource, CostVar outVarCostCopy) {

}
[Node(name:"GetClosestPowerSquad", menu:"Debug")]public void GetClosestPowerSquadEffect(PlayerVar inVarOwner, PowerVar inVarPower, VectorVar inVarPowerLocation, SquadVar outVarClosestPowerSquad) {

}
[Node(name:"UsePower", menu:"Debug")]public void UsePowerEffect(PlayerVar inVarOwner, PowerVar inVarPower, SquadVar inVarSquad, SquadVar inVarTarget) {

}
[Node(name:"FilterAddCanChangeOwner", menu:"Debug")]public void FilterAddCanChangeOwnerEffect(BoolVar inVarinvertFilter, EntityFilterSetVar outVarEntityFilterSet) {

}
[Node(name:"GetPowerRadius", menu:"Debug")]public void GetPowerRadiusEffect(PlayerVar inVarPlayer, PowerVar inVarPower, FloatVar outVarRadius) {

}
[Node(name:"InputUISquadList", menu:"Debug")]public void InputUISquadListEffect(PlayerVar inVarUserPlayer, FloatVar inVarSelectionRadius, EntityFilterSetVar inVarEntityFilterSet, UISquadListVar outVarUISquadList) {

}
[Node(name:"Transform", menu:"Debug")]public void TransformEffect(ProtoObjectVar inVarNewProtoObject, UnitVar inVarTransformUnit, UnitListVar inVarTransformList) {

}
[Node(name:"UnitListShuffle", menu:"Debug")]public void UnitListShuffleEffect(UnitListVar inVarUnitList) {

}
[Node(name:"RepairByCombatValue", menu:"Debug")]public void RepairByCombatValueEffect(SquadVar inVarSquad, SquadListVar inVarSquadList, UnitVar inVarUnit, UnitListVar inVarUnitList, FloatVar inVarCombatValue, FloatVar inVarCombatValuePercent, BoolVar inVarSpreadAmongSquads, FloatVar inVarDamageTakenScalar) {

}
[Node(name:"SquadFlagSet", menu:"Debug")]public void SquadFlagSetEffect(SquadVar inVarSquad, SquadListVar inVarSquadList, SquadFlagVar inVarSquadFlag, BoolVar inVarBool) {

}
[Node(name:"AttachmentRemoveAll", menu:"Debug")]public void AttachmentRemoveAllEffect(UnitVar inVarUnit, UnitListVar inVarUnitList, SquadVar inVarSquad, SquadListVar inVarSquadList) {

}
[Node(name:"KillUnits", menu:"Debug")]public void KillUnitsEffect(UnitVar inVarKillUnit, UnitListVar inVarKillUnitList) {

}
[Node(name:"GetGarrisonedUnits", menu:"Debug")]public void GetGarrisonedUnitsEffect(UnitVar inVarContainerUnit, UnitListVar outVarGarrisonedUnits, IntegerVar outVarNumGarrisoned) {

}
[Node(name:"GetPlayerScore", menu:"Debug")]public void GetPlayerScoreEffect(PlayerVar inVarPlayer, IntegerVar outVarScore) {

}
[Node(name:"TowSetScore", menu:"Debug")]public void TowSetScoreEffect(IntegerVar inVaralphaScore, IntegerVar inVarbravoScore, IntegerVar inVartotalScore) {

}
[Node(name:"TowSetVisible", menu:"Debug")]public void TowSetVisibleEffect(BoolVar inVarvisible) {

}
[Node(name:"TugOfWarMarkPlayersAsTrailing", menu:"Debug")]public void TugOfWarMarkPlayersAsTrailingEffect(PlayerListVar inVarPlayersToFlag, BoolVar inVarBoolTrailing) {

}
[Node(name:"GetIdleDuration", menu:"Debug")]public void GetIdleDurationEffect(UnitVar inVarUnit, SquadVar inVarSquad, TimeVar outVarIdleTime) {

}
[Node(name:"", menu:"Debug")]public void Effect(TriggerVar inVar) {

}
[Node(name:"AIBindLog", menu:"Debug")]public void AIBindLogEffect(PlayerVar inVarPlayer, BoolVar inVarTraceOn, GroupVar inVarGroupToLog) {

}
[Node(name:"ObjectTypeToProtoObjects", menu:"Debug")]public void ObjectTypeToProtoObjectsEffect(ObjectTypeVar inVarObjectType, ProtoObjectListVar outVarProtoObjectList, IntegerVar outVarCount) {

}
[Node(name:"IntToCount", menu:"Debug")]public void IntToCountEffect(IntegerVar inVarInteger, IntegerVar outVarCount) {

}
[Node(name:"AISetFocus", menu:"Debug")]public void AISetFocusEffect(PlayerVar inVarPlayer, VectorVar inVarPosition, UnitVar inVarUnit, SquadVar inVarSquad) {

}
[Node(name:"AIMissionTargetGetScores", menu:"Debug")]public void AIMissionTargetGetScoresEffect(IntegerVar inVarMissionTargetID, FloatVar outVarScoreTotal, FloatVar outVarScoreInstance, FloatVar outVarScoreClass, FloatVar outVarScoreAfford, FloatVar outVarScorePermission) {

}
[Node(name:"AIMissionGetLaunchScores", menu:"Debug")]public void AIMissionGetLaunchScoresEffect(IntegerVar inVarMissionID, FloatVar outVarScoreTotal, FloatVar outVarScoreInstance, FloatVar outVarScoreClass, FloatVar outVarScoreAfford, FloatVar outVarScorePermission) {

}
[Node(name:"BidDelete", menu:"Debug")]public void BidDeleteEffect(IntegerVar inVarBidID) {

}
[Node(name:"AITopicCreate", menu:"Debug")]public void AITopicCreateEffect(PlayerVar inVarPlayer, StringVar inVarTopicName, BoolVar inVarTopicBool, IntegerVar inVarMinTickets, IntegerVar inVarMaxTickets, TimeVar inVarTicketInterval, TimeVar inVarCommitmentTime, TimeVar inVarServiceInterval, IntegerVar outVarAITopicID) {

}
[Node(name:"BidCreateSquad", menu:"Debug")]public void BidCreateSquadEffect(PlayerVar inVarPlayer, ProtoSquadVar inVarProtoSquadID, FloatVar inVarPriority, UnitVar inVarBuilder, VectorVar inVarTargetLocation, IntegerVar outVarBidID) {

}
[Node(name:"BidGetData", menu:"Debug")]public void BidGetDataEffect(IntegerVar inVarBidID, ProtoObjectVar outVarBuildingToConstruct, ProtoSquadVar outVarSquadToTrain, TechVar outVarTechToResearch, FloatVar outVarPriority, FloatVar outVarScore, PowerVar outVarProtoPower) {

}
[Node(name:"TableLoad", menu:"Debug")]public void TableLoadEffect(UserClassTypeVar inVarUserClassType, StringVar inVarFileName, StringVar inVarTableName, BoolVar inVarShared, IntegerVar outVarTableID) {

}
[Node(name:"BidCreateTech", menu:"Debug")]public void BidCreateTechEffect(PlayerVar inVarPlayer, TechVar inVarTech, FloatVar inVarPriority, UnitVar inVarBuilder, VectorVar inVarTargetLoc, IntegerVar outVarBidID) {

}
[Node(name:"BidPurchase", menu:"Debug")]public void BidPurchaseEffect(IntegerVar inVarBidID, BoolVar outVarSuccess, VectorVar outVarResultLocation) {

}
[Node(name:"AITopicModifyTickets", menu:"Debug")]public void AITopicModifyTicketsEffect(IntegerVar inVarAITopicID, IntegerVar inVarMinTickets, IntegerVar inVarMaxTickets, TimeVar inVarTicketInterval) {

}
[Node(name:"AITopicLotto", menu:"Debug")]public void AITopicLottoEffect(PlayerVar inVarPlayerID) {

}
[Node(name:"AIRemoveFromMissions", menu:"Debug")]public void AIRemoveFromMissionsEffect(SquadListVar inVarSquadList) {

}
[Node(name:"BidCreateBuilding", menu:"Debug")]public void BidCreateBuildingEffect(PlayerVar inVarPlayer, ProtoObjectVar inVarProtoObjectID, FloatVar inVarPriority, UnitVar inVarBuilder, VectorVar inVarTargetLoc, IntegerVar outVarBidID) {

}
[Node(name:"BidSetQueueLimits", menu:"Debug")]public void BidSetQueueLimitsEffect(PlayerVar inVarPlayerID, TimeVar inVarSquadGlobalQueueLimt, TimeVar inVarSquadTrainQueueLimit) {

}
[Node(name:"KBSQInit", menu:"Debug")]public void KBSQInitEffect(BoolVar inVarResetQuery, VectorVar inVarPosition, FloatVar inVarRadius, PlayerVar inVarPlayer, DiplomacyVar inVarPlayerRelation, ObjectTypeVar inVarObjectType, KBBaseVar inVarBase, TimeVar inVarMinStaleness, TimeVar inVarMaxStaleness, KBSquadQueryVar outVarKBSquadQuery) {

}
[Node(name:"KBSQPlayerRelation", menu:"Debug")]public void KBSQPlayerRelationEffect(PlayerVar inVarPlayer, DiplomacyVar inVarRelation, BoolVar inVarSelfAsAlly, KBSquadQueryVar outVarOutputKBSquadQuery) {

}
[Node(name:"KBSQExecute", menu:"Debug")]public void KBSQExecuteEffect(TeamVar inVarQueryingTeam, KBSquadQueryVar inVarKBSquadQuery, KBSquadListVar outVarResultKBSquadList, IntegerVar outVarResultKBSquadCount) {

}
[Node(name:"KBSquadListFilter", menu:"Debug")]public void KBSquadListFilterEffect(TeamVar inVarQueryingTeam, KBSquadListVar inVarSourceKBSquadList, KBSquadFilterSetVar inVarKBSquadFilterSet, KBSquadListVar outVarPassedKBSquadList, KBSquadListVar outVarFailedKBSquadList) {

}
[Node(name:"AIAnalyzeKBSquadList", menu:"Debug")]public void AIAnalyzeKBSquadListEffect(KBSquadListVar inVarKBSquadList, AISquadAnalysisVar outVarAISquadAnalysis) {

}
[Node(name:"IteratorProtoSquadList", menu:"Debug")]public void IteratorProtoSquadListEffect(ProtoSquadListVar inVarProtoSquadList, IteratorVar outVarInitializedIterator) {

}
[Node(name:"AIAnalyzeOffenseAToB", menu:"Debug")]public void AIAnalyzeOffenseAToBEffect(AISquadAnalysisVar inVarAnalysisA, AISquadAnalysisVar inVarAnalysisB, FloatVar outVarOffenseAToB) {

}
[Node(name:"KBBQExecute", menu:"Debug")]public void KBBQExecuteEffect(TeamVar inVarTeam, KBBaseQueryVar inVarKBBaseQuery, KBBaseListVar outVarResultBaseList, IntegerVar outVarResultBaseCount) {

}
[Node(name:"IteratorKBBaseList", menu:"Debug")]public void IteratorKBBaseListEffect(KBBaseListVar inVarKBBaseList, IteratorVar outVarIterator) {

}
[Node(name:"KBBaseGetMass", menu:"Debug")]public void KBBaseGetMassEffect(KBBaseVar inVarKBBase, FloatVar outVarMass) {

}
[Node(name:"CopyKBBase", menu:"Debug")]public void CopyKBBaseEffect(KBBaseVar inVarKBBaseSource, KBBaseVar outVarKBBaseDest) {

}
[Node(name:"GetKBBaseLocation", menu:"Debug")]public void GetKBBaseLocationEffect(KBBaseVar inVarKBBase, VectorVar outVarLocation) {

}
[Node(name:"KBBQPlayerRelation", menu:"Debug")]public void KBBQPlayerRelationEffect(PlayerVar inVarPlayer, DiplomacyVar inVarRelationType, BoolVar inVarSelfAsAlly, KBBaseQueryVar outVarKBBaseQuery) {

}
[Node(name:"CopyChatSpeaker", menu:"Debug")]public void CopyChatSpeakerEffect(ChatSpeakerVar inVarChatSpeakerSource, ChatSpeakerVar outVarChatSpeakerCopy) {

}
[Node(name:"AIGetFlareAlerts", menu:"Debug")]public void AIGetFlareAlertsEffect(PlayerVar inVarPlayerID, IntegerListVar outVarAlertIDs, IntegerVar outVarAlertCount) {

}
[Node(name:"AIGetLastFlareAlert", menu:"Debug")]public void AIGetLastFlareAlertEffect(PlayerVar inVarPlayerID, IntegerVar outVarAlertID) {

}
[Node(name:"AIGetAlertData", menu:"Debug")]public void AIGetAlertDataEffect(IntegerVar inVarAlertID, VectorVar outVarLocation, PlayerVar outVarFlaringPlayerID, TimeVar outVarCreatedTime, TimeVar outVarExpiresTime, BoolVar outVarWasUnitClicked, UnitVar outVarClickedUnit) {

}
[Node(name:"BidQuery", menu:"Debug")]public void BidQueryEffect(PlayerVar inVarPlayer, BidStateVar inVarBidState, BidTypeVar inVarBidType, IntegerListVar inVarFilterBidList, ProtoSquadVar inVarProtoSquad, ProtoObjectVar inVarProtoObject, TechVar inVarTech, TimeVar inVarMinTime, TimeVar inVarMaxTime, ObjectTypeVar inVarObjectType, PowerVar inVarProtoPowerID, IntegerListVar outVarBidList, IntegerVar outVarBidCount) {

}
[Node(name:"AIGetAttackAlerts", menu:"Debug")]public void AIGetAttackAlertsEffect(PlayerVar inVarPlayerID, IntegerListVar outVarAlertIDs, IntegerVar outVarAlertCount) {

}
[Node(name:"AIGetLastAttackAlert", menu:"Debug")]public void AIGetLastAttackAlertEffect(PlayerVar inVarPlayerID, IntegerVar outVarAlertID) {

}
[Node(name:"ConvertKBSquadsToSquads", menu:"Debug")]public void ConvertKBSquadsToSquadsEffect(KBSquadListVar inVarKBSquadList, SquadListVar outVarSquadList) {

}
[Node(name:"SetResourceHandicap", menu:"Debug")]public void SetResourceHandicapEffect(PlayerVar inVarPlayer, FloatVar inVarMultiplier) {

}
[Node(name:"AIGetTerminalMissions", menu:"Debug")]public void AIGetTerminalMissionsEffect(PlayerVar inVarPlayerID, IntegerListVar outVarMissionIDs, IntegerVar outVarMissionCount) {

}
[Node(name:"AIClearOpportunityRequests", menu:"Debug")]public void AIClearOpportunityRequestsEffect(PlayerVar inVarPlayerID) {

}
[Node(name:"AIRegisterHook", menu:"Debug")]public void AIRegisterHookEffect(EntityVar inVarEntity, SquadVar inVarSquad, StringVar inVarHookType, StringVar inVarSubtype) {

}
[Node(name:"AISetBiases", menu:"Debug")]public void AISetBiasesEffect(FloatVar inVarOffense, FloatVar inVarNodes, FloatVar inVarMainBases, PlayerVar inVarHatedEnemy, BoolVar inVarOKToAttack, BoolVar inVarOKToDefend, BoolVar inVarResetToDefaults, PlayerVar inVarPlayer) {

}
[Node(name:"GetUTechBldings", menu:"Debug")]public void GetUTechBldingsEffect(PlayerVar inVarPlayer, TechVar inVarTech, IntegerVar outVarAvailableBuildings) {

}
[Node(name:"KBSQObjectType", menu:"Debug")]public void KBSQObjectTypeEffect(ObjectTypeVar inVarObjectType, KBSquadQueryVar outVarKBSquadQuery) {

}
[Node(name:"AIQueryMissionTargets", menu:"Debug")]public void AIQueryMissionTargetsEffect(PlayerVar inVarPlayer, VectorVar inVarLocation, FloatVar inVarRadius, MissionTargetTypeVar inVarMissionTargetType, IntegerListVar outVarPassed, IntegerListVar outVarFailed) {

}
[Node(name:"GetDifficulty", menu:"Debug")]public void GetDifficultyEffect(PlayerVar inVarPlayer, FloatVar outVarDifficultyFloat) {

}
[Node(name:"SquadListShuffle", menu:"Debug")]public void SquadListShuffleEffect(SquadListVar inVarSquadList) {

}
[Node(name:"AIFactoidSubmit", menu:"Debug")]public void AIFactoidSubmitEffect(PlayerListVar inVarToPlayerList, PlayerVar inVarFromPlayer, StringVar inVarEventName, IntegerVar inVarPriority, TimeVar inVarDeadline, VectorVar inVarDestination, VectorVar inVarSource, BoolVar inVarShowArrow) {

}
[Node(name:"AsTime", menu:"Debug")]public void AsTimeEffect(IntegerVar inVarInteger, FloatVar inVarFloat, TimeVar outVarTime) {

}
[Node(name:"RecycleBuilding", menu:"Debug")]public void RecycleBuildingEffect(UnitVar inVarUnit, BoolVar inVarKillSubsOnly, BoolVar inVarKillQueued, BoolVar inVarKillBuilding, BoolVar inVarKillBuilt) {

}
[Node(name:"AIGetMemory", menu:"Debug")]public void AIGetMemoryEffect(PlayerVar inVarPlayer, BoolVar outVarDidPlayerWinLastGame, CostVar outVarAvgAIResourcesPerGame, IntegerVar outVarNumGamesPlayedVsAI, IntegerVar outVarNumGamesAIWonVSPlayer, TimeVar outVarTimePlayerFirstAttackedAI, TimeVar outVarTimeAIFirstAttackedPlayer, IntegerListVar outVarPreviousStratsUsedVsPlayer) {

}
[Node(name:"BidCreatePower", menu:"Debug")]public void BidCreatePowerEffect(PlayerVar inVarPlayerID, PowerVar inVarProtoPowerID, FloatVar inVarPriority, IntegerVar outVarBidID) {

}
[Node(name:"BidAddToMissions", menu:"Debug")]public void BidAddToMissionsEffect(IntegerVar inVarBid, IntegerListVar inVarBidList, IntegerVar inVarMission, IntegerListVar inVarMissionList) {

}
[Node(name:"UnitListPartition", menu:"Debug")]public void UnitListPartitionEffect(UnitListVar inVarSrcUnitList, FloatVar inVarPercentToA, IntegerVar inVarNumToA, UnitListVar outVarUnitListA, UnitListVar outVarUnitListB) {

}
[Node(name:"KBSFAddObjectTypes", menu:"Debug")]public void KBSFAddObjectTypesEffect(ObjectTypeListVar inVarObjectTypeList, BoolVar inVarInvert, KBSquadFilterSetVar outVarKBSquadFilterSet) {

}
[Node(name:"LocationListShuffle", menu:"Debug")]public void LocationListShuffleEffect(VectorListVar inVarLocationList) {

}
[Node(name:"TeamsToPlayers", menu:"Debug")]public void TeamsToPlayersEffect(TeamListVar inVarTeamList, PlayerListVar outVarPlayerList) {

}
[Node(name:"KBAddSquadsToKB", menu:"Debug")]public void KBAddSquadsToKBEffect(PlayerVar inVarPlayer, SquadListVar inVarSquadList) {

}
[Node(name:"BidSetBlockedBuilders", menu:"Debug")]public void BidSetBlockedBuildersEffect(PlayerVar inVarPlayerID, UnitListVar inVarBlockedBuilders, BoolVar inVarClearAll) {

}
[Node(name:"AIMissionSetTargetInfo", menu:"Debug")]public void AIMissionSetTargetInfoEffect(IntegerVar inVarMissionID, IntegerVar inVarTarget) {

}
[Node(name:"AITopicPriorityRequest", menu:"Debug")]public void AITopicPriorityRequestEffect(IntegerVar inVarAITopicID) {

}
[Node(name:"ProtoObjectListShuffle", menu:"Debug")]public void ProtoObjectListShuffleEffect(ProtoObjectListVar inVarProtoObjectList) {

}
[Node(name:"KBBQExecuteClosest", menu:"Debug")]public void KBBQExecuteClosestEffect(TeamVar inVarQueryingTeam, KBBaseQueryVar inVarKBBaseQuery, VectorVar inVarTestPosition, KBBaseListVar outVarResultKBBaseList, IntegerVar outVarResultKBBaseCount) {

}
[Node(name:"CustomCommandExecute", menu:"Debug")]public void CustomCommandExecuteEffect(UnitVar inVarUnit, IntegerVar inVarSlot, PlayerVar inVarPlayer) {

}
[Node(name:"GetLegalBuildings", menu:"Debug")]public void GetLegalBuildingsEffect(PlayerVar inVarPlayer, ProtoObjectListVar outVarProtoObjectList, IntegerVar outVarCount) {

}
[Node(name:"AISetPlayerDamageModifiers", menu:"Debug")]public void AISetPlayerDamageModifiersEffect(PlayerVar inVarPlayer, FloatVar inVarDamageMultiplier, FloatVar inVarDamageTakenMultiplier) {

}
[Node(name:"AISetPlayerMultipliers", menu:"Debug")]public void AISetPlayerMultipliersEffect(PlayerVar inVarPlayer, IntegerVar inVarMissionID, BoolVar inVarClear, PlayerVar inVarPlayerID1, FloatVar inVarcValue1, PlayerVar inVarPlayerID2, FloatVar inVarcValue2, PlayerVar inVarPlayerID3, FloatVar inVarcValue3) {

}
[Node(name:"AIMissionSetFlags", menu:"Debug")]public void AIMissionSetFlagsEffect(IntegerVar inVarMissionID, BoolVar inVarEnableOdstDrop) {

}
[Node(name:"GetPopularSquadType", menu:"Debug")]public void GetPopularSquadTypeEffect(SquadListVar inVarSquadList, ProtoSquadVar outVarProtoSquad, IntegerVar outVarCount) {

}
[Node(name:"GetGameMode", menu:"Debug")]public void GetGameModeEffect(BoolVar outVarIsSkirmish, BoolVar outVarIsDeathmatch) {

}
[Node(name:"AISetPlayerBuildSpeedModifiers", menu:"Debug")]public void AISetPlayerBuildSpeedModifiersEffect(PlayerVar inVarPlayerID, FloatVar inVarBuildSpeedMultiplier) {

}
[Node(name:"GetDLCGameMode", menu:"Debug")]public void GetDLCGameModeEffect(BoolVar outVarIsReinforcement, BoolVar outVarIsKeepAway, BoolVar outVarIsTugOfWar) {

}
[Node(name:"GetCTFFlagCarrier", menu:"Debug")]public void GetCTFFlagCarrierEffect(SquadVar outVarSquad) {

}
[Node(name:"AIDeleteCTFMission", menu:"Debug")]public void AIDeleteCTFMissionEffect(PlayerVar inVarPlayer) {

}
[Node(name:"Teleport", menu:"Debug")]public void TeleportEffect(SquadVar inVarSquad, SquadListVar inVarSquadList, ObjectVar inVarObject, ObjectListVar inVarObjectList, BoolVar inVarIgnorePlot, VectorVar inVarDestination) {

}
[Node(name:"EventClearFilters", menu:"Debug")]public void EventClearFiltersEffect(IntegerVar inVarEventID) {

}
[Node(name:"InputUILocationMinigame", menu:"Debug")]public void InputUILocationMinigameEffect(PlayerVar inVarPlayer, ProtoObjectVar inVarProtoObject, BoolVar inVarCheckObstruction, LOSTypeVar inVarLOSType, PlacementRuleVar inVarPlacementRule, BoolVar inVarLOSCenterOnly, PowerVar inVarPower, BoolVar inVarMinigame, FloatVar inVarMinigameTimeFactor, BoolVar inVarRestartMinigame, UILocationMinigameVar outVarUILocationMinigame) {

}
[Node(name:"InputUISquad", menu:"Debug")]public void InputUISquadEffect(PlayerVar inVarUserPlayer, PlayerVar inVarSquadOwner, ProtoSquadVar inVarSquadProtoSquad, ObjectTypeVar inVarSquadChildrenObjectType, ObjectTypeListVar inVarSquadChildrenObjectTypeList, DiplomacyVar inVarDiplomacy, PowerVar inVarPower, UISquadVar outVarUISquad) {

}
[Node(name:"BlockLeaderPowers", menu:"Debug")]public void BlockLeaderPowersEffect(PlayerVar inVarPlayer, BoolVar inVarBlock) {

}
[Node(name:"BlockMinimap", menu:"Debug")]public void BlockMinimapEffect(PlayerVar inVarPlayer, BoolVar inVarBlock) {

}
[Node(name:"ModifyProtoSquadData", menu:"Debug")]public void ModifyProtoSquadDataEffect(PlayerVar inVarPlayer, PlayerListVar inVarPlayerList, ProtoSquadVar inVarProtoSquad, FloatVar inVarAmount, FloatVar inVarAmountAsPercent, StringVar inVarActionName, SquadDataTypeVar inVarDataType, ObjectDataRelativeVar inVarAmountRelation, CommandTypeVar inVarCommandType, IntegerVar inVarCommandData, BoolVar inVarInvertRelation, BoolVar inVarEffectAllActions) {

}
[Node(name:"RallyPointGet", menu:"Debug")]public void RallyPointGetEffect(PlayerVar inVarPlayer, BoolVar outVarHasRallyPoint, VectorVar outVarLocation) {

}
[Node(name:"ProtoSquadListGetSize", menu:"Debug")]public void ProtoSquadListGetSizeEffect(ProtoSquadListVar inVarProtoSquadList, IntegerVar outVarSize) {

}
