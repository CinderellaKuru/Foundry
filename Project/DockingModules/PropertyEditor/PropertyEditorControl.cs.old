using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using ComponentFactory.Krypton.Toolkit;

namespace SMHEditor.DockingModules.PropertyEditor
{
    public class PropertyItem
    {
        protected int xPadding = 5;
        public int y;
        public int height = 26;
        public string name = "name";
        
        public PropertyItem()
        {
        }

        public virtual void Register(PropertyEditorControl c) { }
        public virtual void Unregister(PropertyEditorControl c) { }

        public virtual void Draw(PaintEventArgs e, int controlWidth)
        {

        }
    }
    public class PropertyItemBase_TwoColumn : PropertyItem 
    {
        public override void Draw(PaintEventArgs e, int controlWidth)
        {
            base.Draw(e, controlWidth);
            e.Graphics.DrawRectangle(new Pen(Color.DarkGray), new Rectangle(
                xPadding,
                y,
                (controlWidth - xPadding * 2) / 2,
                height));

            e.Graphics.DrawRectangle(new Pen(Color.DarkGray), new Rectangle(
               xPadding + (controlWidth - xPadding * 2) / 2,
               y,
               (controlWidth - xPadding * 2) / 2,
               height));

            e.Graphics.DrawString(name, Control.DefaultFont, new SolidBrush(Color.DarkGray), xPadding, y + 6);
        }
    }
    public class PropertyItem_String : PropertyItemBase_TwoColumn
    {
        public KryptonTextBox tb = new KryptonTextBox();

        public PropertyItem_String(string title) : base()
        {
            name = title;
        }

        public override void Register(PropertyEditorControl c)
        {
            c.Controls.Add(tb);
            base.Register(c);
        }
        public override void Unregister(PropertyEditorControl c)
        {
            c.Controls.Remove(tb);
            base.Unregister(c);
        }

        public override void Draw(PaintEventArgs e, int controlWidth)
        {
            base.Draw(e, controlWidth);
            tb.Location = new Point(((controlWidth - xPadding * 2) / 2) + xPadding + 1, y + 2);
            tb.Width = ((controlWidth - xPadding * 2) / 2) - 1;
            tb.Height = height - 1;
        }
    }
    public class PropertyItem_Bool : PropertyItemBase_TwoColumn
    {
        public string trueText = "True", falseText = "False";
        public bool state = false;
        public Button button;

        public PropertyItem_Bool(string title, string falseText, string trueText) : base()
        {
            name = title;
            button = new Button();
            button.ForeColor = Color.White;
            button.AutoSize = false;
            button.Click += OnPressed;
            this.falseText = falseText;
            this.trueText = trueText;
            button.Text = falseText;
            button.Font = Control.DefaultFont;
        }

        public override void Register(PropertyEditorControl c)
        {
            c.Controls.Add(button);
            base.Register(c);
        }
        public override void Unregister(PropertyEditorControl c)
        {
            c.Controls.Remove(button);
            base.Unregister(c);
        }

        public void OnPressed(object o, EventArgs e)
        {
            state = !state;

            if (state) button.Text = trueText;
            else button.Text = falseText;
        }

        public override void Draw(PaintEventArgs e, int controlWidth)
        {
            base.Draw(e, controlWidth);
            button.Location = new Point(((controlWidth - xPadding * 2) / 2) + xPadding, y);
            button.Width = ((controlWidth - xPadding * 2) / 2) + 1;
            button.Height = height + 1;
        }
    }

    public partial class PropertyEditorControl : UserControl
    {
        private List<PropertyItem> propertyItems = new List<PropertyItem>();
        public PropertyEditorControl()
        {
            InitializeComponent();
            DoubleBuffered = true;
        }

        public void AddProperty(PropertyItem i)
        {
            i.y = currentY;
            propertyItems.Add(i);
            i.Register(this);
            currentY += i.height;
        }
        public void Clear()
        {
            foreach(PropertyItem p in propertyItems)
            {
                p.Unregister(this);
                p.y = 0;
            }
            propertyItems.Clear();
            currentY = 0;
        }
        public void FinishLayout()
        {
            Invalidate();
        }

        int currentY = 0;
        protected override void OnPaint(PaintEventArgs e)
        {
            base.OnPaint(e);
            
            foreach (PropertyItem i in propertyItems)
            {
                i.Draw(e, Width);
            }
        }
    }
}
